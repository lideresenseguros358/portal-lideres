[
  {
    "schema_json": "{\n    \"project\": \"postgres\",\n    \"schemas\": [\n        {\n            \"enums\": [\n                {\n                    \"enum\": \"aal_level\",\n                    \"labels\": [\n                        \"aal1\",\n                        \"aal2\",\n                        \"aal3\"\n                    ]\n                },\n                {\n                    \"enum\": \"code_challenge_method\",\n                    \"labels\": [\n                        \"s256\",\n                        \"plain\"\n                    ]\n                },\n                {\n                    \"enum\": \"factor_status\",\n                    \"labels\": [\n                        \"unverified\",\n                        \"verified\"\n                    ]\n                },\n                {\n                    \"enum\": \"factor_type\",\n                    \"labels\": [\n                        \"totp\",\n                        \"webauthn\",\n                        \"phone\"\n                    ]\n                },\n                {\n                    \"enum\": \"oauth_registration_type\",\n                    \"labels\": [\n                        \"dynamic\",\n                        \"manual\"\n                    ]\n                },\n                {\n                    \"enum\": \"one_time_token_type\",\n                    \"labels\": [\n                        \"confirmation_token\",\n                        \"reauthentication_token\",\n                        \"recovery_token\",\n                        \"email_change_token_new\",\n                        \"email_change_token_current\",\n                        \"phone_change_token\"\n                    ]\n                }\n            ],\n            \"views\": [\n            ],\n            \"schema\": \"auth\",\n            \"tables\": [\n                {\n                    \"table\": \"audit_log_entries\",\n                    \"columns\": [\n                        {\n                            \"name\": \"instance_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"payload\",\n                            \"type\": \"json\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"ip_address\",\n                            \"type\": \"character varying(64)\",\n                            \"default\": \"''::character varying\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX audit_log_entries_pkey ON auth.audit_log_entries USING btree (id)\",\n                            \"name\": \"audit_log_entries_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id)\",\n                            \"name\": \"audit_logs_instance_id_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"audit_log_entries_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"flow_state\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"user_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"auth_code\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"code_challenge_method\",\n                            \"type\": \"auth.code_challenge_method\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"code_challenge\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"provider_type\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"provider_access_token\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"provider_refresh_token\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"authentication_method\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"auth_code_issued_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX flow_state_pkey ON auth.flow_state USING btree (id)\",\n                            \"name\": \"flow_state_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code)\",\n                            \"name\": \"idx_auth_code\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method)\",\n                            \"name\": \"idx_user_id_auth_method\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC)\",\n                            \"name\": \"flow_state_created_at_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"flow_state_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"identities\",\n                    \"columns\": [\n                        {\n                            \"name\": \"provider_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"user_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"identity_data\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"provider\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"last_sign_in_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"text\",\n                            \"default\": \"lower((identity_data ->> 'email'::text))\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id)\",\n                            \"name\": \"identities_user_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops)\",\n                            \"name\": \"identities_email_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX identities_pkey ON auth.identities USING btree (id)\",\n                            \"name\": \"identities_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX identities_provider_id_provider_unique ON auth.identities USING btree (provider_id, provider)\",\n                            \"name\": \"identities_provider_id_provider_unique\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"identities_user_id_fkey\",\n                            \"columns\": [\n                                \"user_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"identities_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"identities_provider_id_provider_unique\",\n                            \"columns\": [\n                                \"provider_id\",\n                                \"provider\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"instances\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"uuid\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"raw_base_config\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX instances_pkey ON auth.instances USING btree (id)\",\n                            \"name\": \"instances_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"instances_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"mfa_amr_claims\",\n                    \"columns\": [\n                        {\n                            \"name\": \"session_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"authentication_method\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX mfa_amr_claims_session_id_authentication_method_pkey ON auth.mfa_amr_claims USING btree (session_id, authentication_method)\",\n                            \"name\": \"mfa_amr_claims_session_id_authentication_method_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX amr_id_pk ON auth.mfa_amr_claims USING btree (id)\",\n                            \"name\": \"amr_id_pk\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"sessions\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"mfa_amr_claims_session_id_fkey\",\n                            \"columns\": [\n                                \"session_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"amr_id_pk\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"mfa_amr_claims_session_id_authentication_method_pkey\",\n                            \"columns\": [\n                                \"session_id\",\n                                \"authentication_method\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"mfa_challenges\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"factor_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"verified_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"ip_address\",\n                            \"type\": \"inet\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"otp_code\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"web_authn_session_data\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX mfa_challenges_pkey ON auth.mfa_challenges USING btree (id)\",\n                            \"name\": \"mfa_challenges_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC)\",\n                            \"name\": \"mfa_challenge_created_at_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"mfa_factors\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"mfa_challenges_auth_factor_id_fkey\",\n                            \"columns\": [\n                                \"factor_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"mfa_challenges_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"mfa_factors\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"user_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"friendly_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"factor_type\",\n                            \"type\": \"auth.factor_type\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"auth.factor_status\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"secret\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"last_challenged_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"web_authn_credential\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"web_authn_aaguid\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX mfa_factors_pkey ON auth.mfa_factors USING btree (id)\",\n                            \"name\": \"mfa_factors_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text)\",\n                            \"name\": \"mfa_factors_user_friendly_name_unique\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at)\",\n                            \"name\": \"factor_id_created_at_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id)\",\n                            \"name\": \"mfa_factors_user_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone)\",\n                            \"name\": \"unique_phone_factor_per_user\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX mfa_factors_last_challenged_at_key ON auth.mfa_factors USING btree (last_challenged_at)\",\n                            \"name\": \"mfa_factors_last_challenged_at_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"mfa_factors_user_id_fkey\",\n                            \"columns\": [\n                                \"user_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"mfa_factors_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"mfa_factors_last_challenged_at_key\",\n                            \"columns\": [\n                                \"last_challenged_at\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"oauth_clients\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"client_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"client_secret_hash\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"registration_type\",\n                            \"type\": \"auth.oauth_registration_type\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"redirect_uris\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"grant_types\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"client_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"client_uri\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"logo_uri\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 10,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 11,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"deleted_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX oauth_clients_pkey ON auth.oauth_clients USING btree (id)\",\n                            \"name\": \"oauth_clients_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX oauth_clients_client_id_key ON auth.oauth_clients USING btree (client_id)\",\n                            \"name\": \"oauth_clients_client_id_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX oauth_clients_client_id_idx ON auth.oauth_clients USING btree (client_id)\",\n                            \"name\": \"oauth_clients_client_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX oauth_clients_deleted_at_idx ON auth.oauth_clients USING btree (deleted_at)\",\n                            \"name\": \"oauth_clients_deleted_at_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"oauth_clients_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"oauth_clients_client_id_key\",\n                            \"columns\": [\n                                \"client_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"one_time_tokens\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"user_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"token_type\",\n                            \"type\": \"auth.one_time_token_type\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"token_hash\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"relates_to\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp without time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp without time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX one_time_tokens_pkey ON auth.one_time_tokens USING btree (id)\",\n                            \"name\": \"one_time_tokens_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash)\",\n                            \"name\": \"one_time_tokens_token_hash_hash_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to)\",\n                            \"name\": \"one_time_tokens_relates_to_hash_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type)\",\n                            \"name\": \"one_time_tokens_user_id_token_type_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"one_time_tokens_user_id_fkey\",\n                            \"columns\": [\n                                \"user_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"one_time_tokens_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"refresh_tokens\",\n                    \"columns\": [\n                        {\n                            \"name\": \"instance_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"bigint\",\n                            \"default\": \"nextval('auth.refresh_tokens_id_seq'::regclass)\",\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"token\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"user_id\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"revoked\",\n                            \"type\": \"boolean\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"parent\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"session_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX refresh_tokens_pkey ON auth.refresh_tokens USING btree (id)\",\n                            \"name\": \"refresh_tokens_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id)\",\n                            \"name\": \"refresh_tokens_instance_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id)\",\n                            \"name\": \"refresh_tokens_instance_id_user_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX refresh_tokens_token_unique ON auth.refresh_tokens USING btree (token)\",\n                            \"name\": \"refresh_tokens_token_unique\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent)\",\n                            \"name\": \"refresh_tokens_parent_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked)\",\n                            \"name\": \"refresh_tokens_session_id_revoked_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC)\",\n                            \"name\": \"refresh_tokens_updated_at_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"sessions\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"refresh_tokens_session_id_fkey\",\n                            \"columns\": [\n                                \"session_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"refresh_tokens_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"refresh_tokens_token_unique\",\n                            \"columns\": [\n                                \"token\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"saml_providers\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"sso_provider_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"entity_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"metadata_xml\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"metadata_url\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"attribute_mapping\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"name_id_format\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX saml_providers_pkey ON auth.saml_providers USING btree (id)\",\n                            \"name\": \"saml_providers_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX saml_providers_entity_id_key ON auth.saml_providers USING btree (entity_id)\",\n                            \"name\": \"saml_providers_entity_id_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id)\",\n                            \"name\": \"saml_providers_sso_provider_id_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"sso_providers\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"saml_providers_sso_provider_id_fkey\",\n                            \"columns\": [\n                                \"sso_provider_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"saml_providers_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"saml_providers_entity_id_key\",\n                            \"columns\": [\n                                \"entity_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"saml_relay_states\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"sso_provider_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"request_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"for_email\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"redirect_to\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"flow_state_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX saml_relay_states_pkey ON auth.saml_relay_states USING btree (id)\",\n                            \"name\": \"saml_relay_states_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id)\",\n                            \"name\": \"saml_relay_states_sso_provider_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email)\",\n                            \"name\": \"saml_relay_states_for_email_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC)\",\n                            \"name\": \"saml_relay_states_created_at_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"flow_state\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"saml_relay_states_flow_state_id_fkey\",\n                            \"columns\": [\n                                \"flow_state_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"sso_providers\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"saml_relay_states_sso_provider_id_fkey\",\n                            \"columns\": [\n                                \"sso_provider_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"saml_relay_states_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"schema_migrations\",\n                    \"columns\": [\n                        {\n                            \"name\": \"version\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX schema_migrations_pkey ON auth.schema_migrations USING btree (version)\",\n                            \"name\": \"schema_migrations_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"schema_migrations_pkey\",\n                            \"columns\": [\n                                \"version\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"sessions\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"user_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"factor_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"aal\",\n                            \"type\": \"auth.aal_level\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"not_after\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"refreshed_at\",\n                            \"type\": \"timestamp without time zone\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"user_agent\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"ip\",\n                            \"type\": \"inet\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"tag\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX sessions_pkey ON auth.sessions USING btree (id)\",\n                            \"name\": \"sessions_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at)\",\n                            \"name\": \"user_id_created_at_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id)\",\n                            \"name\": \"sessions_user_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC)\",\n                            \"name\": \"sessions_not_after_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"sessions_user_id_fkey\",\n                            \"columns\": [\n                                \"user_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"sessions_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"sso_domains\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"sso_provider_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"domain\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX sso_domains_pkey ON auth.sso_domains USING btree (id)\",\n                            \"name\": \"sso_domains_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id)\",\n                            \"name\": \"sso_domains_sso_provider_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain))\",\n                            \"name\": \"sso_domains_domain_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"sso_providers\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"sso_domains_sso_provider_id_fkey\",\n                            \"columns\": [\n                                \"sso_provider_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"sso_domains_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"sso_providers\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"resource_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"disabled\",\n                            \"type\": \"boolean\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX sso_providers_pkey ON auth.sso_providers USING btree (id)\",\n                            \"name\": \"sso_providers_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id))\",\n                            \"name\": \"sso_providers_resource_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX sso_providers_resource_id_pattern_idx ON auth.sso_providers USING btree (resource_id text_pattern_ops)\",\n                            \"name\": \"sso_providers_resource_id_pattern_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"sso_providers_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"users\",\n                    \"columns\": [\n                        {\n                            \"name\": \"instance_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"aud\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"role\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"encrypted_password\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email_confirmed_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"invited_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"confirmation_token\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"confirmation_sent_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"recovery_token\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"recovery_sent_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email_change_token_new\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email_change\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": null,\n                            \"ordinal\": 14,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email_change_sent_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 15,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"last_sign_in_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 16,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"raw_app_meta_data\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 17,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"raw_user_meta_data\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 18,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"is_super_admin\",\n                            \"type\": \"boolean\",\n                            \"default\": null,\n                            \"ordinal\": 19,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 20,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 21,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone\",\n                            \"type\": \"text\",\n                            \"default\": \"NULL::character varying\",\n                            \"ordinal\": 22,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone_confirmed_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 23,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone_change\",\n                            \"type\": \"text\",\n                            \"default\": \"''::character varying\",\n                            \"ordinal\": 24,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone_change_token\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": \"''::character varying\",\n                            \"ordinal\": 25,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone_change_sent_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 26,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"confirmed_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"LEAST(email_confirmed_at, phone_confirmed_at)\",\n                            \"ordinal\": 27,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email_change_token_current\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": \"''::character varying\",\n                            \"ordinal\": 28,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email_change_confirm_status\",\n                            \"type\": \"smallint\",\n                            \"default\": \"0\",\n                            \"ordinal\": 29,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"banned_until\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 30,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"reauthentication_token\",\n                            \"type\": \"character varying(255)\",\n                            \"default\": \"''::character varying\",\n                            \"ordinal\": 31,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"reauthentication_sent_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 32,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"is_sso_user\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 33,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"deleted_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 34,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"is_anonymous\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 35,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX users_pkey ON auth.users USING btree (id)\",\n                            \"name\": \"users_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id)\",\n                            \"name\": \"users_instance_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text))\",\n                            \"name\": \"users_instance_id_email_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text)\",\n                            \"name\": \"confirmation_token_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text)\",\n                            \"name\": \"recovery_token_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text)\",\n                            \"name\": \"email_change_token_current_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text)\",\n                            \"name\": \"email_change_token_new_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text)\",\n                            \"name\": \"reauthentication_token_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false)\",\n                            \"name\": \"users_email_partial_key\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX users_phone_key ON auth.users USING btree (phone)\",\n                            \"name\": \"users_phone_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous)\",\n                            \"name\": \"users_is_anonymous_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER on_auth_user_created_full AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user_full()\",\n                            \"name\": \"on_auth_user_created_full\",\n                            \"function\": \"handle_new_user_full\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"users_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"users_phone_key\",\n                            \"columns\": [\n                                \"phone\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"functions\": [\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION auth.email()\\n RETURNS text\\n LANGUAGE sql\\n STABLE\\nAS $function$\\n  select \\n  coalesce(\\n    nullif(current_setting('request.jwt.claim.email', true), ''),\\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')\\n  )::text\\n$function$\\n\",\n                    \"name\": \"email\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION auth.jwt()\\n RETURNS jsonb\\n LANGUAGE sql\\n STABLE\\nAS $function$\\n  select \\n    coalesce(\\n        nullif(current_setting('request.jwt.claim', true), ''),\\n        nullif(current_setting('request.jwt.claims', true), '')\\n    )::jsonb\\n$function$\\n\",\n                    \"name\": \"jwt\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION auth.role()\\n RETURNS text\\n LANGUAGE sql\\n STABLE\\nAS $function$\\n  select \\n  coalesce(\\n    nullif(current_setting('request.jwt.claim.role', true), ''),\\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')\\n  )::text\\n$function$\\n\",\n                    \"name\": \"role\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION auth.uid()\\n RETURNS uuid\\n LANGUAGE sql\\n STABLE\\nAS $function$\\n  select \\n  coalesce(\\n    nullif(current_setting('request.jwt.claim.sub', true), ''),\\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')\\n  )::uuid\\n$function$\\n\",\n                    \"name\": \"uid\"\n                }\n            ],\n            \"sequences\": [\n                {\n                    \"inc\": \"1\",\n                    \"max\": \"9223372036854775807\",\n                    \"min\": \"1\",\n                    \"type\": \"bigint\",\n                    \"cycle\": \"NO\",\n                    \"start\": \"1\",\n                    \"sequence\": \"refresh_tokens_id_seq\"\n                }\n            ]\n        },\n        {\n            \"enums\": [\n            ],\n            \"views\": [\n            ],\n            \"schema\": \"graphql_public\",\n            \"tables\": [\n            ],\n            \"functions\": [\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION graphql_public.graphql(\\\"operationName\\\" text DEFAULT NULL::text, query text DEFAULT NULL::text, variables jsonb DEFAULT NULL::jsonb, extensions jsonb DEFAULT NULL::jsonb)\\n RETURNS jsonb\\n LANGUAGE sql\\nAS $function$\\n            select graphql.resolve(\\n                query := query,\\n                variables := coalesce(variables, '{}'),\\n                \\\"operationName\\\" := \\\"operationName\\\",\\n                extensions := extensions\\n            );\\n        $function$\\n\",\n                    \"name\": \"graphql\"\n                }\n            ],\n            \"sequences\": [\n            ]\n        },\n        {\n            \"enums\": [\n                {\n                    \"enum\": \"case_section\",\n                    \"labels\": [\n                        \"SIN_CLASIFICAR\",\n                        \"RAMOS_GENERALES\",\n                        \"VIDA_ASSA\",\n                        \"OTROS_PERSONAS\"\n                    ]\n                },\n                {\n                    \"enum\": \"case_section_enum\",\n                    \"labels\": [\n                        \"SIN_CLASIFICAR\",\n                        \"RAMOS_GENERALES\",\n                        \"VIDA_ASSA\",\n                        \"OTROS_PERSONAS\"\n                    ]\n                },\n                {\n                    \"enum\": \"case_status\",\n                    \"labels\": [\n                        \"PENDIENTE_REVISION\",\n                        \"EN_PROCESO\",\n                        \"RESUELTO\",\n                        \"DESCARTADO\"\n                    ]\n                },\n                {\n                    \"enum\": \"case_status_enum\",\n                    \"labels\": [\n                        \"PENDIENTE_REVISION\",\n                        \"EN_PROCESO\",\n                        \"FALTA_DOC\",\n                        \"APLAZADO\",\n                        \"RECHAZADO\",\n                        \"APROBADO_PEND_PAGO\",\n                        \"EMITIDO\",\n                        \"CERRADO\"\n                    ]\n                },\n                {\n                    \"enum\": \"case_type_enum\",\n                    \"labels\": [\n                        \"COTIZACION\",\n                        \"EMISION_GENERAL\",\n                        \"EMISION_VIDA_ASSA_WEB\",\n                        \"EMISION_VIDA_ASSA_NO_WEB\",\n                        \"OTRO\"\n                    ]\n                },\n                {\n                    \"enum\": \"event_audience\",\n                    \"labels\": [\n                        \"ALL\",\n                        \"SELECTED\"\n                    ]\n                },\n                {\n                    \"enum\": \"fortnight_status_enum\",\n                    \"labels\": [\n                        \"DRAFT\",\n                        \"READY\",\n                        \"PAID\"\n                    ]\n                },\n                {\n                    \"enum\": \"map_kind\",\n                    \"labels\": [\n                        \"COMMISSIONS\",\n                        \"DELINQUENCY\"\n                    ]\n                },\n                {\n                    \"enum\": \"policy_status_enum\",\n                    \"labels\": [\n                        \"ACTIVA\",\n                        \"CANCELADA\",\n                        \"VENCIDA\"\n                    ]\n                },\n                {\n                    \"enum\": \"porcents\",\n                    \"labels\": [\n                        \"1\",\n                        \"0.94\",\n                        \"0.82\",\n                        \"0.8\",\n                        \"0.7\",\n                        \"0.6\",\n                        \"0.5\",\n                        \"0\"\n                    ]\n                },\n                {\n                    \"enum\": \"role_enum\",\n                    \"labels\": [\n                        \"master\",\n                        \"broker\"\n                    ]\n                },\n                {\n                    \"enum\": \"role_t\",\n                    \"labels\": [\n                        \"master\",\n                        \"broker\"\n                    ]\n                },\n                {\n                    \"enum\": \"user_role\",\n                    \"labels\": [\n                        \"MASTER\",\n                        \"BROKER\"\n                    ]\n                }\n            ],\n            \"views\": [\n            ],\n            \"schema\": \"public\",\n            \"tables\": [\n                {\n                    \"table\": \"advance_logs\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"advance_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"amount\",\n                            \"type\": \"numeric\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"payment_type\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"fortnight_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"applied_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX advance_logs_pkey ON public.advance_logs USING btree (id)\",\n                            \"name\": \"advance_logs_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"advances\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"advance_logs_advance_id_fkey\",\n                            \"columns\": [\n                                \"advance_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"advance_logs_applied_by_fkey\",\n                            \"columns\": [\n                                \"applied_by\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"fortnights\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"advance_logs_fortnight_id_fkey\",\n                            \"columns\": [\n                                \"fortnight_id\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"advance_logs_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"advances\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"amount\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"reason\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"'APROBADO'::text\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX advances_pkey ON public.advances USING btree (id)\",\n                            \"name\": \"advances_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX advances_broker_idx ON public.advances USING btree (broker_id)\",\n                            \"name\": \"advances_broker_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (broker_id = auth.uid()))\",\n                            \"policy\": \"advances_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"advances_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"advances_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"advances_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"advances_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"advances_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"app_settings\",\n                    \"columns\": [\n                        {\n                            \"name\": \"key\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"value\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX app_settings_pkey ON public.app_settings USING btree (key)\",\n                            \"name\": \"app_settings_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"settings_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"settings_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"app_settings_pkey\",\n                            \"columns\": [\n                                \"key\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"audit_logs\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"action\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"entity\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"entity_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"meta\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX audit_logs_pkey ON public.audit_logs USING btree (id)\",\n                            \"name\": \"audit_logs_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"audit_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"audit_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"audit_logs_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"audit_logs_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"bank_history\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"imported_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"transaction_date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"description\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"reference\",\n                            \"type\": \"character varying(100)\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"debit\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"credit\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"balance\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"raw_data\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"matched_check_item_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 11,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 12,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX bank_history_pkey ON public.bank_history USING btree (id)\",\n                            \"name\": \"bank_history_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_bank_history_transaction_date ON public.bank_history USING btree (transaction_date)\",\n                            \"name\": \"idx_bank_history_transaction_date\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_bank_history_reference ON public.bank_history USING btree (reference)\",\n                            \"name\": \"idx_bank_history_reference\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_bank_history_matched_check ON public.bank_history USING btree (matched_check_item_id)\",\n                            \"name\": \"idx_bank_history_matched_check\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"DELETE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\",\n                            \"policy\": \"Masters can delete bank history\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"INSERT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": null,\n                            \"policy\": \"Masters can insert bank history\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\"\n                        },\n                        {\n                            \"cmd\": \"UPDATE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\",\n                            \"policy\": \"Masters can update bank history\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\",\n                            \"policy\": \"Masters can view bank history\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER update_bank_history_updated_at BEFORE UPDATE ON bank_history FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()\",\n                            \"name\": \"update_bank_history_updated_at\",\n                            \"function\": \"update_updated_at_column\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"check_items\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"bank_history_matched_check_item_id_fkey\",\n                            \"columns\": [\n                                \"matched_check_item_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"bank_history_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"bank_transfers\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"reference_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"transaction_code\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"description\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"amount\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"used_amount\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"remaining_amount\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"(amount - used_amount)\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"\\nCASE\\n    WHEN (used_amount = (0)::numeric) THEN 'available'::text\\n    WHEN (used_amount < amount) THEN 'partial'::text\\n    WHEN (used_amount >= amount) THEN 'exhausted'::text\\n    ELSE NULL::text\\nEND\",\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"imported_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX bank_transfers_pkey ON public.bank_transfers USING btree (id)\",\n                            \"name\": \"bank_transfers_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX bank_transfers_reference_number_key ON public.bank_transfers USING btree (reference_number)\",\n                            \"name\": \"bank_transfers_reference_number_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_bank_transfers_ref ON public.bank_transfers USING btree (reference_number)\",\n                            \"name\": \"idx_bank_transfers_ref\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_bank_transfers_status ON public.bank_transfers USING btree (status)\",\n                            \"name\": \"idx_bank_transfers_status\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_bank_transfers_date ON public.bank_transfers USING btree (date DESC)\",\n                            \"name\": \"idx_bank_transfers_date\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"INSERT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": null,\n                            \"policy\": \"Masters pueden insertar bank_transfers\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(EXISTS ( SELECT 1\\n   FROM auth.users\\n  WHERE ((auth.uid() = users.id) AND ((users.raw_user_meta_data ->> 'role'::text) = 'master'::text))))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM auth.users\\n  WHERE ((auth.uid() = users.id) AND ((users.raw_user_meta_data ->> 'role'::text) = 'master'::text))))\",\n                            \"policy\": \"Masters pueden ver todo bank_transfers\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"bank_transfers_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"bank_transfers_reference_number_key\",\n                            \"columns\": [\n                                \"reference_number\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"brokers\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"birth_date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"national_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"assa_code\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"license_no\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"percent_default\",\n                            \"type\": \"numeric(4,2)\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"bank_account_no\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"bank_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"beneficiary_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"beneficiary_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"active\",\n                            \"type\": \"boolean\",\n                            \"default\": \"true\",\n                            \"ordinal\": 14,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 15,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"p_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 16,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"tipo_cuenta\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 17,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"numero_cuenta\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 18,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"numero_cedula\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 19,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"nombre_completo\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 20,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_pkey ON public.brokers USING btree (id)\",\n                            \"name\": \"brokers_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_email_key ON public.brokers USING btree (lower(email))\",\n                            \"name\": \"brokers_email_key\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_assa_code_unique_where_not_null ON public.brokers USING btree (assa_code) WHERE (assa_code IS NOT NULL)\",\n                            \"name\": \"brokers_assa_code_unique_where_not_null\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX brokers_national_id_idx ON public.brokers USING btree (national_id)\",\n                            \"name\": \"brokers_national_id_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_profile_unique ON public.brokers USING btree (p_id)\",\n                            \"name\": \"brokers_profile_unique\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_email_unique ON public.brokers USING btree (lower(email))\",\n                            \"name\": \"brokers_email_unique\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_email_lower_key ON public.brokers USING btree (lower(email))\",\n                            \"name\": \"brokers_email_lower_key\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX brokers_p_id_key ON public.brokers USING btree (p_id)\",\n                            \"name\": \"brokers_p_id_key\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"brokers_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((p_id = auth.uid()) OR is_master())\",\n                            \"policy\": \"brokers_read_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"brokers_id_fkey_profiles\",\n                            \"columns\": [\n                                \"id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"brokers_p_fk_profiles\",\n                            \"columns\": [\n                                \"p_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"brokers_p_id_fkey\",\n                            \"columns\": [\n                                \"p_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"brokers_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"brokers_p_id_key\",\n                            \"columns\": [\n                                \"p_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"case_checklist\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"case_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"label\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"required\",\n                            \"type\": \"boolean\",\n                            \"default\": \"true\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"completed\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"completed_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"completed_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX case_checklist_pkey ON public.case_checklist USING btree (id)\",\n                            \"name\": \"case_checklist_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX case_checklist_case_idx ON public.case_checklist USING btree (case_id)\",\n                            \"name\": \"case_checklist_case_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (EXISTS ( SELECT 1\\n   FROM cases c\\n  WHERE ((c.id = case_checklist.case_id) AND ((c.broker_id = auth.uid()) OR (c.created_by = auth.uid()))))))\",\n                            \"policy\": \"case_checklist_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM cases c\\n  WHERE ((c.id = case_checklist.case_id) AND (is_master() OR ((c.broker_id IS NOT NULL) AND is_self(c.broker_id)) OR (c.created_by = auth.uid())))))\",\n                            \"policy\": \"case_checklist_rw\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(EXISTS ( SELECT 1\\n   FROM cases c\\n  WHERE ((c.id = case_checklist.case_id) AND (is_master() OR ((c.broker_id IS NOT NULL) AND is_self(c.broker_id)) OR (c.created_by = auth.uid())))))\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"cases\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"case_checklist_case_id_fkey\",\n                            \"columns\": [\n                                \"case_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"case_checklist_completed_by_fkey\",\n                            \"columns\": [\n                                \"completed_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"case_checklist_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"case_files\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"case_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"storage_path\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"original_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"mime_type\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"size_bytes\",\n                            \"type\": \"bigint\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX case_files_pkey ON public.case_files USING btree (id)\",\n                            \"name\": \"case_files_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX case_files_case_idx ON public.case_files USING btree (case_id)\",\n                            \"name\": \"case_files_case_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (EXISTS ( SELECT 1\\n   FROM cases c\\n  WHERE ((c.id = case_files.case_id) AND ((c.broker_id = auth.uid()) OR (c.created_by = auth.uid()))))))\",\n                            \"policy\": \"case_files_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM cases c\\n  WHERE ((c.id = case_files.case_id) AND (is_master() OR ((c.broker_id IS NOT NULL) AND is_self(c.broker_id)) OR (c.created_by = auth.uid())))))\",\n                            \"policy\": \"case_files_rw\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(EXISTS ( SELECT 1\\n   FROM cases c\\n  WHERE ((c.id = case_files.case_id) AND (is_master() OR ((c.broker_id IS NOT NULL) AND is_self(c.broker_id)) OR (c.created_by = auth.uid())))))\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"cases\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"case_files_case_id_fkey\",\n                            \"columns\": [\n                                \"case_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"case_files_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"case_files_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"cases\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"canal\",\n                            \"type\": \"text\",\n                            \"default\": \"'PORTAL'::text\",\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"section\",\n                            \"type\": \"case_section_enum\",\n                            \"default\": \"'SIN_CLASIFICAR'::case_section_enum\",\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"ctype\",\n                            \"type\": \"case_type_enum\",\n                            \"default\": \"'COTIZACION'::case_type_enum\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"case_status_enum\",\n                            \"default\": \"'PENDIENTE_REVISION'::case_status_enum\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"client_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"ticket_ref\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"seen_by_broker\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 12,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"notes\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 14,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 15,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX cases_pkey ON public.cases USING btree (id)\",\n                            \"name\": \"cases_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX cases_broker_idx ON public.cases USING btree (broker_id)\",\n                            \"name\": \"cases_broker_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX cases_section_idx ON public.cases USING btree (section)\",\n                            \"name\": \"cases_section_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX cases_status_idx ON public.cases USING btree (status)\",\n                            \"name\": \"cases_status_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX cases_ticket_idx ON public.cases USING btree (ticket_ref)\",\n                            \"name\": \"cases_ticket_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (broker_id = auth.uid()) OR (created_by = auth.uid()))\",\n                            \"policy\": \"cases_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR ((broker_id IS NOT NULL) AND is_self(broker_id)) OR (created_by = auth.uid()))\",\n                            \"policy\": \"cases_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(is_master() OR ((broker_id IS NOT NULL) AND is_self(broker_id)) OR (created_by = auth.uid()))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR ((broker_id IS NOT NULL) AND is_self(broker_id)) OR (created_by = auth.uid()))\",\n                            \"policy\": \"cases_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"cases_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"clients\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"cases_client_id_fkey\",\n                            \"columns\": [\n                                \"client_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"cases_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"cases_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"cases_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"check_batches\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"title\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX check_batches_pkey ON public.check_batches USING btree (id)\",\n                            \"name\": \"check_batches_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"check_batches_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"check_batches_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"check_batches_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"check_items\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"batch_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"client_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"amount\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"is_refund\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bank_json\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"reference\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"'PENDIENTE'::text\",\n                            \"ordinal\": 11,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bank_matched_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"bank_history_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX check_items_pkey ON public.check_items USING btree (id)\",\n                            \"name\": \"check_items_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX check_items_broker_idx ON public.check_items USING btree (broker_id)\",\n                            \"name\": \"check_items_broker_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_check_items_reference ON public.check_items USING btree (reference)\",\n                            \"name\": \"idx_check_items_reference\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_check_items_broker ON public.check_items USING btree (broker_id)\",\n                            \"name\": \"idx_check_items_broker\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_check_items_bank_history ON public.check_items USING btree (bank_history_id)\",\n                            \"name\": \"idx_check_items_bank_history\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (broker_id = auth.uid()))\",\n                            \"policy\": \"check_items_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"check_items_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"check_items_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"bank_history\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"check_items_bank_history_id_fkey\",\n                            \"columns\": [\n                                \"bank_history_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"check_batches\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"check_items_batch_id_fkey\",\n                            \"columns\": [\n                                \"batch_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"check_items_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"check_items_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"clients\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"national_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"active\",\n                            \"type\": \"boolean\",\n                            \"default\": \"true\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX clients_pkey ON public.clients USING btree (id)\",\n                            \"name\": \"clients_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX clients_broker_idx ON public.clients USING btree (broker_id)\",\n                            \"name\": \"clients_broker_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_clients_broker_id ON public.clients USING btree (broker_id)\",\n                            \"name\": \"idx_clients_broker_id\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"clients_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"true\"\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_self(broker_id)\",\n                            \"policy\": \"clients_cud_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_self(broker_id)\"\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"((EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.role = 'master'::role_enum)))) OR (broker_id = auth.uid()))\",\n                            \"policy\": \"clients_modify_by_role\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.role = 'master'::role_enum)))) OR (broker_id = auth.uid()))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"clients_read_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"clients_read_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"((EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.role = 'master'::role_enum)))) OR (broker_id = auth.uid()))\",\n                            \"policy\": \"clients_select_by_role\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"clients_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"clients_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"comm_imports\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"period_label\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"uploaded_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"total_amount\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"is_life_insurance\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX comm_imports_pkey ON public.comm_imports USING btree (id)\",\n                            \"name\": \"comm_imports_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX comm_imports_insurer_idx ON public.comm_imports USING btree (insurer_id)\",\n                            \"name\": \"comm_imports_insurer_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_comm_imports_is_life ON public.comm_imports USING btree (is_life_insurance)\",\n                            \"name\": \"idx_comm_imports_is_life\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"comm_imports_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_imports_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"r\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_imports_uploaded_by_fkey\",\n                            \"columns\": [\n                                \"uploaded_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"comm_imports_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"comm_item_claims\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"comm_item_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"'pending'::text\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"resolved_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"resolved_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX comm_item_claims_pkey ON public.comm_item_claims USING btree (id)\",\n                            \"name\": \"comm_item_claims_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX comm_item_claims_comm_item_id_key ON public.comm_item_claims USING btree (comm_item_id)\",\n                            \"name\": \"comm_item_claims_comm_item_id_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_item_claims_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"comm_items\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_item_claims_comm_item_id_fkey\",\n                            \"columns\": [\n                                \"comm_item_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_item_claims_resolved_by_fkey\",\n                            \"columns\": [\n                                \"resolved_by\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"comm_item_claims_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"comm_item_claims_comm_item_id_key\",\n                            \"columns\": [\n                                \"comm_item_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"comm_items\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"import_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insured_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"gross_amount\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"raw_row\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX comm_items_pkey ON public.comm_items USING btree (id)\",\n                            \"name\": \"comm_items_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX comm_items_import_idx ON public.comm_items USING btree (import_id)\",\n                            \"name\": \"comm_items_import_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX comm_items_policy_idx ON public.comm_items USING btree (policy_number)\",\n                            \"name\": \"comm_items_policy_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_comm_items_policy_number_broker ON public.comm_items USING btree (policy_number, broker_id) WHERE (broker_id IS NOT NULL)\",\n                            \"name\": \"idx_comm_items_policy_number_broker\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (broker_id = auth.uid()))\",\n                            \"policy\": \"comm_items_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"comm_items_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR ((broker_id IS NOT NULL) AND is_self(broker_id)))\",\n                            \"policy\": \"comm_items_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER trg_update_clients_policies_from_comm AFTER INSERT ON comm_items FOR EACH ROW EXECUTE FUNCTION update_clients_policies_from_commissions()\",\n                            \"name\": \"trg_update_clients_policies_from_comm\",\n                            \"function\": \"update_clients_policies_from_commissions\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_items_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"comm_imports\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_items_import_id_fkey\",\n                            \"columns\": [\n                                \"import_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_items_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"r\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"comm_items_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"comm_metadata\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"import_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"fortnight_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"key\",\n                            \"type\": \"character varying(100)\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"value\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX comm_metadata_pkey ON public.comm_metadata USING btree (id)\",\n                            \"name\": \"comm_metadata_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_comm_metadata_import ON public.comm_metadata USING btree (import_id)\",\n                            \"name\": \"idx_comm_metadata_import\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_comm_metadata_fortnight ON public.comm_metadata USING btree (import_id)\",\n                            \"name\": \"idx_comm_metadata_fortnight\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_comm_metadata_key ON public.comm_metadata USING btree (key)\",\n                            \"name\": \"idx_comm_metadata_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"fortnights\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_metadata_fortnight_id_fkey\",\n                            \"columns\": [\n                                \"fortnight_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"comm_imports\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"comm_metadata_import_id_fkey\",\n                            \"columns\": [\n                                \"import_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"comm_metadata_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"doc_tags\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX doc_tags_pkey ON public.doc_tags USING btree (id)\",\n                            \"name\": \"doc_tags_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX doc_tags_name_lower_uniq ON public.doc_tags USING btree (lower(name))\",\n                            \"name\": \"doc_tags_name_lower_uniq\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"doctags_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"true\",\n                            \"policy\": \"doctags_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"doc_tags_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"download_doc_tags\",\n                    \"columns\": [\n                        {\n                            \"name\": \"doc_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"tag_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX download_doc_tags_pkey ON public.download_doc_tags USING btree (doc_id, tag_id)\",\n                            \"name\": \"download_doc_tags_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"doctagmap_rw\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"download_docs\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"download_doc_tags_doc_id_fkey\",\n                            \"columns\": [\n                                \"doc_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"doc_tags\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"download_doc_tags_tag_id_fkey\",\n                            \"columns\": [\n                                \"tag_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"download_doc_tags_pkey\",\n                            \"columns\": [\n                                \"doc_id\",\n                                \"tag_id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"download_docs\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"ramo\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"title\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"storage_path\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"is_required\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX download_docs_pkey ON public.download_docs USING btree (id)\",\n                            \"name\": \"download_docs_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"downloads_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"true\",\n                            \"policy\": \"downloads_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"download_docs_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"download_docs_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"download_docs_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"event_attendees\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"event_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"rsvp\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX event_attendees_pkey ON public.event_attendees USING btree (id)\",\n                            \"name\": \"event_attendees_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX event_attendees_event_id_broker_id_key ON public.event_attendees USING btree (event_id, broker_id)\",\n                            \"name\": \"event_attendees_event_id_broker_id_key\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"attendees_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(is_master() OR is_self(broker_id))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"attendees_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"event_attendees_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"events\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"event_attendees_event_id_fkey\",\n                            \"columns\": [\n                                \"event_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"event_attendees_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"event_attendees_event_id_broker_id_key\",\n                            \"columns\": [\n                                \"event_id\",\n                                \"broker_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"events\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"title\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"details\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"start_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"end_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"location\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"audience\",\n                            \"type\": \"text\",\n                            \"default\": \"'ALL'::text\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX events_pkey ON public.events USING btree (id)\",\n                            \"name\": \"events_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"events_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"true\",\n                            \"policy\": \"events_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"events_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"events_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"fortnight_broker_totals\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"fortnight_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"gross_amount\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"discounts_json\",\n                            \"type\": \"jsonb\",\n                            \"default\": \"'{}'::jsonb\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"net_amount\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bank_snapshot\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX fortnight_broker_totals_pkey ON public.fortnight_broker_totals USING btree (id)\",\n                            \"name\": \"fortnight_broker_totals_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX fortnight_broker_totals_fortnight_id_broker_id_key ON public.fortnight_broker_totals USING btree (fortnight_id, broker_id)\",\n                            \"name\": \"fortnight_broker_totals_fortnight_id_broker_id_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX fbt_broker_idx ON public.fortnight_broker_totals USING btree (broker_id)\",\n                            \"name\": \"fbt_broker_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"fbt_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"fbt_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(is_master() OR (broker_id = auth.uid()))\",\n                            \"policy\": \"fortnight_totals_access\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"fortnight_broker_totals_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"fortnights\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"fortnight_broker_totals_fortnight_id_fkey\",\n                            \"columns\": [\n                                \"fortnight_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"fortnight_broker_totals_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"fortnight_broker_totals_fortnight_id_broker_id_key\",\n                            \"columns\": [\n                                \"fortnight_id\",\n                                \"broker_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"fortnights\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"period_start\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"period_end\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"fortnight_status_enum\",\n                            \"default\": \"'DRAFT'::fortnight_status_enum\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"notify_brokers\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX fortnights_pkey ON public.fortnights USING btree (id)\",\n                            \"name\": \"fortnights_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"fortnights_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"fortnights_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"fortnights_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"insurer_assa_codes\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"code\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"active\",\n                            \"type\": \"boolean\",\n                            \"default\": \"true\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"code_norm\",\n                            \"type\": \"text\",\n                            \"default\": \"upper(TRIM(BOTH FROM code))\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_assa_codes_pkey ON public.insurer_assa_codes USING btree (id)\",\n                            \"name\": \"insurer_assa_codes_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_code_unique_idx ON public.insurer_assa_codes USING btree (insurer_id, lower(code))\",\n                            \"name\": \"insurer_code_unique_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_assa_codes_insurer_code_norm_key ON public.insurer_assa_codes USING btree (insurer_id, code_norm)\",\n                            \"name\": \"insurer_assa_codes_insurer_code_norm_key\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_assa_codes_code_lower_uniq ON public.insurer_assa_codes USING btree (insurer_id, lower(code))\",\n                            \"name\": \"insurer_assa_codes_code_lower_uniq\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_assa_codes_unique ON public.insurer_assa_codes USING btree (insurer_id, lower(code))\",\n                            \"name\": \"insurer_assa_codes_unique\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"assa_codes_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"true\",\n                            \"policy\": \"assa_codes_read_all_auth\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"insurer_assa_codes_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"insurer_assa_codes_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"insurer_assa_codes_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"insurer_assa_codes_insurer_code_norm_key\",\n                            \"columns\": [\n                                \"insurer_id\",\n                                \"code_norm\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"insurer_delinquency_rules\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"target_field\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"strategy\",\n                            \"type\": \"text\",\n                            \"default\": \"'aliases'::text\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"notes\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"aliases\",\n                            \"type\": \"jsonb\",\n                            \"default\": \"'[]'::jsonb\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_delinquency_rules_pkey ON public.insurer_delinquency_rules USING btree (id)\",\n                            \"name\": \"insurer_delinquency_rules_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_delinquency_rules_insurer_id_target_field_key ON public.insurer_delinquency_rules USING btree (insurer_id, target_field)\",\n                            \"name\": \"insurer_delinquency_rules_insurer_id_target_field_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"insurer_delinquency_rules_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"insurer_delinquency_rules_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"insurer_delinquency_rules_insurer_id_target_field_key\",\n                            \"columns\": [\n                                \"insurer_id\",\n                                \"target_field\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"insurer_mapping_rules\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"target_field\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"strategy\",\n                            \"type\": \"text\",\n                            \"default\": \"'aliases'::text\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"notes\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"aliases\",\n                            \"type\": \"jsonb\",\n                            \"default\": \"'[]'::jsonb\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"commission_column_2_aliases\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"commission_column_3_aliases\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_mapping_rules_pkey ON public.insurer_mapping_rules USING btree (id)\",\n                            \"name\": \"insurer_mapping_rules_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_mapping_rules_insurer_id_target_field_key ON public.insurer_mapping_rules USING btree (insurer_id, target_field)\",\n                            \"name\": \"insurer_mapping_rules_insurer_id_target_field_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"insurer_mapping_rules_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"insurer_mapping_rules_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"insurer_mapping_rules_insurer_id_target_field_key\",\n                            \"columns\": [\n                                \"insurer_id\",\n                                \"target_field\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"insurer_mappings\",\n                    \"columns\": [\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"policy_strategy\",\n                            \"type\": \"text\",\n                            \"default\": \"'aliases'::text\",\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insured_strategy\",\n                            \"type\": \"text\",\n                            \"default\": \"'aliases'::text\",\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"commission_strategy\",\n                            \"type\": \"text\",\n                            \"default\": \"'aliases'::text\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"options\",\n                            \"type\": \"jsonb\",\n                            \"default\": \"'{}'::jsonb\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"active\",\n                            \"type\": \"boolean\",\n                            \"default\": \"true\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurer_mappings_pkey ON public.insurer_mappings USING btree (insurer_id)\",\n                            \"name\": \"insurer_mappings_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"insurer_mappings_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"insurer_mappings_pkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"insurers\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"active\",\n                            \"type\": \"boolean\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"invert_negatives\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"use_multi_commission_columns\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurers_name_key ON public.insurers USING btree (lower(name))\",\n                            \"name\": \"insurers_name_key\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX insurers_pkey ON public.insurers USING btree (id)\",\n                            \"name\": \"insurers_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"insurers_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"true\",\n                            \"policy\": \"insurers_read_all_auth\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"insurers_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"notification_reads\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"notification_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"profile_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"read_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX notification_reads_pkey ON public.notification_reads USING btree (id)\",\n                            \"name\": \"notification_reads_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX notification_reads_notification_id_profile_id_key ON public.notification_reads USING btree (notification_id, profile_id)\",\n                            \"name\": \"notification_reads_notification_id_profile_id_key\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((profile_id = auth.uid()) OR is_master())\",\n                            \"policy\": \"notifreads_rw\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((profile_id = auth.uid()) OR is_master())\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"notifications\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"notification_reads_notification_id_fkey\",\n                            \"columns\": [\n                                \"notification_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"profiles\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"notification_reads_profile_id_fkey\",\n                            \"columns\": [\n                                \"profile_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"notification_reads_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"notification_reads_notification_id_profile_id_key\",\n                            \"columns\": [\n                                \"notification_id\",\n                                \"profile_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"notifications\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"target\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"title\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"body\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id)\",\n                            \"name\": \"notifications_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"notifications_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"true\",\n                            \"policy\": \"notifications_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"notifications_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"notifications_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"payment_details\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bank_transfer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"payment_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"insurer_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"client_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"purpose\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"amount_used\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"paid_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX payment_details_pkey ON public.payment_details USING btree (id)\",\n                            \"name\": \"payment_details_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_payment_details_transfer ON public.payment_details USING btree (bank_transfer_id)\",\n                            \"name\": \"idx_payment_details_transfer\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_payment_details_payment ON public.payment_details USING btree (payment_id)\",\n                            \"name\": \"idx_payment_details_payment\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"INSERT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": null,\n                            \"policy\": \"Masters pueden insertar payment_details\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(EXISTS ( SELECT 1\\n   FROM auth.users\\n  WHERE ((auth.uid() = users.id) AND ((users.raw_user_meta_data ->> 'role'::text) = 'master'::text))))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM auth.users\\n  WHERE ((auth.uid() = users.id) AND ((users.raw_user_meta_data ->> 'role'::text) = 'master'::text))))\",\n                            \"policy\": \"Masters pueden ver todo payment_details\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"bank_transfers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"payment_details_bank_transfer_id_fkey\",\n                            \"columns\": [\n                                \"bank_transfer_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"pending_payments\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"payment_details_payment_id_fkey\",\n                            \"columns\": [\n                                \"payment_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"payment_details_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"payment_references\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"payment_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"reference_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"amount\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"amount_to_use\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"exists_in_bank\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX payment_references_pkey ON public.payment_references USING btree (id)\",\n                            \"name\": \"payment_references_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_payment_refs_payment ON public.payment_references USING btree (payment_id)\",\n                            \"name\": \"idx_payment_refs_payment\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_payment_refs_reference ON public.payment_references USING btree (reference_number)\",\n                            \"name\": \"idx_payment_refs_reference\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"INSERT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": null,\n                            \"policy\": \"Users pueden crear payment_references\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(EXISTS ( SELECT 1\\n   FROM pending_payments pp\\n  WHERE ((pp.id = payment_references.payment_id) AND (pp.created_by = auth.uid()))))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM (pending_payments pp\\n     JOIN auth.users u ON ((u.id = auth.uid())))\\n  WHERE ((pp.id = payment_references.payment_id) AND (((u.raw_user_meta_data ->> 'role'::text) = 'master'::text) OR (pp.created_by = auth.uid())))))\",\n                            \"policy\": \"Users pueden ver payment_references de sus pagos\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER trg_update_can_be_paid AFTER INSERT OR UPDATE ON payment_references FOR EACH ROW EXECUTE FUNCTION update_can_be_paid()\",\n                            \"name\": \"trg_update_can_be_paid\",\n                            \"function\": \"update_can_be_paid\"\n                        },\n                        {\n                            \"def\": \"CREATE TRIGGER trg_validate_payment_refs BEFORE INSERT OR UPDATE ON payment_references FOR EACH ROW EXECUTE FUNCTION validate_payment_references()\",\n                            \"name\": \"trg_validate_payment_refs\",\n                            \"function\": \"validate_payment_references\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"pending_payments\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"payment_references_payment_id_fkey\",\n                            \"columns\": [\n                                \"payment_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"payment_references_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"pending_items\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insured_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"commission_raw\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"fortnight_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"import_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"'open'::text\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"assigned_broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"assigned_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"assigned_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"assignment_notes\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"action_type\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 14,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 15,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX pending_items_pkey ON public.pending_items USING btree (id)\",\n                            \"name\": \"pending_items_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_items_policy_number ON public.pending_items USING btree (policy_number)\",\n                            \"name\": \"idx_pending_items_policy_number\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_items_fortnight ON public.pending_items USING btree (fortnight_id)\",\n                            \"name\": \"idx_pending_items_fortnight\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_items_insurer ON public.pending_items USING btree (insurer_id)\",\n                            \"name\": \"idx_pending_items_insurer\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_items_status ON public.pending_items USING btree (status)\",\n                            \"name\": \"idx_pending_items_status\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_items_assigned_broker ON public.pending_items USING btree (assigned_broker_id)\",\n                            \"name\": \"idx_pending_items_assigned_broker\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_items_created_at ON public.pending_items USING btree (created_at)\",\n                            \"name\": \"idx_pending_items_created_at\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM (profiles p\\n     JOIN brokers b ON ((b.id = p.id)))\\n  WHERE ((p.id = auth.uid()) AND (b.id = pending_items.assigned_broker_id))))\",\n                            \"policy\": \"pending_items_broker_assigned\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"UPDATE\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"((status = 'open'::text) AND (EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'broker'::role_enum)))))\",\n                            \"policy\": \"pending_items_broker_claim\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((status = 'claimed'::text) AND (assigned_broker_id = auth.uid()))\"\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\",\n                            \"policy\": \"pending_items_master_all\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER trigger_auto_create_pending_policy AFTER INSERT ON pending_items FOR EACH ROW EXECUTE FUNCTION auto_create_pending_policy()\",\n                            \"name\": \"trigger_auto_create_pending_policy\",\n                            \"function\": \"auto_create_pending_policy\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_items_assigned_broker_id_fkey\",\n                            \"columns\": [\n                                \"assigned_broker_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_items_assigned_by_fkey\",\n                            \"columns\": [\n                                \"assigned_by\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"fortnights\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_items_fortnight_id_fkey\",\n                            \"columns\": [\n                                \"fortnight_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"comm_imports\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_items_import_id_fkey\",\n                            \"columns\": [\n                                \"import_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_items_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"pending_items_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"pending_payments\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"client_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"insurer_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"purpose\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"amount_to_pay\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"total_received\",\n                            \"type\": \"numeric(12,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"'pending'::text\",\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"can_be_paid\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"notes\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"paid_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX pending_payments_pkey ON public.pending_payments USING btree (id)\",\n                            \"name\": \"pending_payments_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_payments_status ON public.pending_payments USING btree (status)\",\n                            \"name\": \"idx_pending_payments_status\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_payments_client ON public.pending_payments USING btree (client_name)\",\n                            \"name\": \"idx_pending_payments_client\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_payments_policy ON public.pending_payments USING btree (policy_number)\",\n                            \"name\": \"idx_pending_payments_policy\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"UPDATE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM auth.users\\n  WHERE ((auth.uid() = users.id) AND (((users.raw_user_meta_data ->> 'role'::text) = 'master'::text) OR (pending_payments.created_by = auth.uid())))))\",\n                            \"policy\": \"Users pueden actualizar sus pending_payments\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"INSERT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": null,\n                            \"policy\": \"Users pueden crear pending_payments\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(created_by = auth.uid())\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM auth.users\\n  WHERE ((auth.uid() = users.id) AND (((users.raw_user_meta_data ->> 'role'::text) = 'master'::text) OR (pending_payments.created_by = auth.uid())))))\",\n                            \"policy\": \"Users pueden ver sus pending_payments\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_payments_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"pending_payments_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"pending_policy\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"pending_item_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"client_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX pending_policy_pkey ON public.pending_policy USING btree (id)\",\n                            \"name\": \"pending_policy_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX pending_policy_pending_item_id_policy_number_key ON public.pending_policy USING btree (pending_item_id, policy_number)\",\n                            \"name\": \"pending_policy_pending_item_id_policy_number_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_policy_item ON public.pending_policy USING btree (pending_item_id)\",\n                            \"name\": \"idx_pending_policy_item\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_pending_policy_number ON public.pending_policy USING btree (policy_number)\",\n                            \"name\": \"idx_pending_policy_number\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM (pending_items pi\\n     JOIN brokers b ON ((b.id = pi.assigned_broker_id)))\\n  WHERE ((pi.id = pending_policy.pending_item_id) AND (b.id = auth.uid()))))\",\n                            \"policy\": \"pending_policy_broker_assigned\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\",\n                            \"policy\": \"pending_policy_master_all\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"pending_items\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"pending_policy_pending_item_id_fkey\",\n                            \"columns\": [\n                                \"pending_item_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"pending_policy_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"pending_policy_pending_item_id_policy_number_key\",\n                            \"columns\": [\n                                \"pending_item_id\",\n                                \"policy_number\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"policies\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"client_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"ramo\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"start_date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"renewal_date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"policy_status_enum\",\n                            \"default\": \"'ACTIVA'::policy_status_enum\",\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"percent_override\",\n                            \"type\": \"numeric(5,2)\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 11,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX policies_pkey ON public.policies USING btree (id)\",\n                            \"name\": \"policies_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX policies_policy_number_key ON public.policies USING btree (policy_number)\",\n                            \"name\": \"policies_policy_number_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX policies_broker_idx ON public.policies USING btree (broker_id)\",\n                            \"name\": \"policies_broker_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX policies_client_idx ON public.policies USING btree (client_id)\",\n                            \"name\": \"policies_client_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX policies_insurer_idx ON public.policies USING btree (insurer_id)\",\n                            \"name\": \"policies_insurer_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_policies_client_id ON public.policies USING btree (client_id)\",\n                            \"name\": \"idx_policies_client_id\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_policies_broker_id ON public.policies USING btree (broker_id)\",\n                            \"name\": \"idx_policies_broker_id\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_policies_policy_number ON public.policies USING btree (policy_number)\",\n                            \"name\": \"idx_policies_policy_number\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"policies_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_self(broker_id)\",\n                            \"policy\": \"policies_cud_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_self(broker_id)\"\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"((EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.role = 'master'::role_enum)))) OR (broker_id = auth.uid()))\",\n                            \"policy\": \"policies_modify_by_role\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.role = 'master'::role_enum)))) OR (broker_id = auth.uid()))\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"policies_read_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"policies_read_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"((EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.role = 'master'::role_enum)))) OR (broker_id = auth.uid()))\",\n                            \"policy\": \"policies_select_by_role\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"policies_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"clients\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"policies_client_id_fkey\",\n                            \"columns\": [\n                                \"client_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"insurers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"policies_insurer_id_fkey\",\n                            \"columns\": [\n                                \"insurer_id\"\n                            ],\n                            \"on_delete\": \"r\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"policies_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"policies_policy_number_key\",\n                            \"columns\": [\n                                \"policy_number\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"production\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"year\",\n                            \"type\": \"integer\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"month\",\n                            \"type\": \"integer\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bruto\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"cancelaciones\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"pma_neto\",\n                            \"type\": \"numeric(14,2)\",\n                            \"default\": \"0\",\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX production_pkey ON public.production USING btree (id)\",\n                            \"name\": \"production_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX production_year_month_broker_id_key ON public.production USING btree (year, month, broker_id)\",\n                            \"name\": \"production_year_month_broker_id_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX production_broker_idx ON public.production USING btree (broker_id)\",\n                            \"name\": \"production_broker_idx\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"production_cud\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(is_master() OR is_self(broker_id))\",\n                            \"policy\": \"production_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"production_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"production_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"production_year_month_broker_id_key\",\n                            \"columns\": [\n                                \"year\",\n                                \"month\",\n                                \"broker_id\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"profiles\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"full_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"role\",\n                            \"type\": \"role_enum\",\n                            \"default\": \"'broker'::role_enum\",\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"broker_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"avatar_url\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"demo_enabled\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"must_change_password\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id)\",\n                            \"name\": \"profiles_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX ix_profiles_broker ON public.profiles USING btree (broker_id)\",\n                            \"name\": \"ix_profiles_broker\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX ux_profiles_email ON public.profiles USING btree (lower(email))\",\n                            \"name\": \"ux_profiles_email\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX profiles_email_lower_key ON public.profiles USING btree (lower(email))\",\n                            \"name\": \"profiles_email_lower_key\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX profiles_email_key ON public.profiles USING btree (lower(email))\",\n                            \"name\": \"profiles_email_key\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((id = auth.uid()) OR is_master())\",\n                            \"policy\": \"profiles_read_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"UPDATE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"is_master()\",\n                            \"policy\": \"profiles_update_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"is_master()\"\n                        },\n                        {\n                            \"cmd\": \"UPDATE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(id = auth.uid())\",\n                            \"policy\": \"profiles_update_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"(id = auth.uid())\"\n                        }\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"brokers\",\n                                \"schema\": \"public\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"profiles_broker_id_fkey\",\n                            \"columns\": [\n                                \"broker_id\"\n                            ],\n                            \"on_delete\": \"n\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"profiles_id_fkey_auth_users\",\n                            \"columns\": [\n                                \"id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"profiles_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"temp_client_imports\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"client_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"national_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"phone\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"address\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"policy_number\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"insurer_name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"ramo\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"start_date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"renewal_date\",\n                            \"type\": \"date\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"status\",\n                            \"type\": \"text\",\n                            \"default\": \"'active'::text\",\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"broker_email\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 14,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"percent_override\",\n                            \"type\": \"numeric(5,2)\",\n                            \"default\": null,\n                            \"ordinal\": 15,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"import_status\",\n                            \"type\": \"text\",\n                            \"default\": \"'pending'::text\",\n                            \"ordinal\": 16,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"error_message\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 17,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"source\",\n                            \"type\": \"text\",\n                            \"default\": \"'csv_import'::text\",\n                            \"ordinal\": 18,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_by\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 19,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"processed_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": null,\n                            \"ordinal\": 20,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX temp_client_imports_pkey ON public.temp_client_imports USING btree (id)\",\n                            \"name\": \"temp_client_imports_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_temp_imports_national_id ON public.temp_client_imports USING btree (national_id)\",\n                            \"name\": \"idx_temp_imports_national_id\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_temp_imports_policy_number ON public.temp_client_imports USING btree (policy_number)\",\n                            \"name\": \"idx_temp_imports_policy_number\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_temp_imports_status ON public.temp_client_imports USING btree (import_status)\",\n                            \"name\": \"idx_temp_imports_status\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_temp_imports_broker_email ON public.temp_client_imports USING btree (broker_email)\",\n                            \"name\": \"idx_temp_imports_broker_email\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles p\\n  WHERE ((p.id = auth.uid()) AND (p.email = temp_client_imports.broker_email))))\",\n                            \"policy\": \"temp_imports_broker_own\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(EXISTS ( SELECT 1\\n   FROM profiles\\n  WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'master'::role_enum))))\",\n                            \"policy\": \"temp_imports_master_all\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER trigger_delete_processed_temp_import AFTER INSERT OR UPDATE ON temp_client_imports FOR EACH ROW EXECUTE FUNCTION delete_processed_temp_import()\",\n                            \"name\": \"trigger_delete_processed_temp_import\",\n                            \"function\": \"delete_processed_temp_import\"\n                        },\n                        {\n                            \"def\": \"CREATE TRIGGER trigger_process_temp_import BEFORE INSERT OR UPDATE ON temp_client_imports FOR EACH ROW EXECUTE FUNCTION process_temp_client_import()\",\n                            \"name\": \"trigger_process_temp_import\",\n                            \"function\": \"process_temp_client_import\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"users\",\n                                \"schema\": \"auth\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"temp_client_imports_created_by_fkey\",\n                            \"columns\": [\n                                \"created_by\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"temp_client_imports_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                }\n            ],\n            \"functions\": [\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public._rnd_money(lo numeric, hi numeric)\\n RETURNS numeric\\n LANGUAGE sql\\n IMMUTABLE\\nAS $function$\\r\\n  SELECT round( (random() * (hi - lo) + lo)::numeric, 2 );\\r\\n$function$\\n\",\n                    \"name\": \"_rnd_money\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.app_broker_id()\\n RETURNS uuid\\n LANGUAGE sql\\n STABLE\\nAS $function$\\r\\n  select (select p.broker_id from public.profiles p where p.id = auth.uid());\\r\\n$function$\\n\",\n                    \"name\": \"app_broker_id\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.assign_pending_to_office_after_3m()\\n RETURNS integer\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nDECLARE\\r\\n  v_office_broker_id UUID;\\r\\n  v_updated_count INTEGER;\\r\\nBEGIN\\r\\n  -- Find the OFFICE broker by email\\r\\n  SELECT b.id INTO v_office_broker_id\\r\\n  FROM public.brokers b\\r\\n  INNER JOIN public.profiles p ON p.id = b.id\\r\\n  WHERE LOWER(p.email) = 'contacto@lideresenseguros.com'\\r\\n  AND b.active = true\\r\\n  LIMIT 1;\\r\\n  \\r\\n  IF v_office_broker_id IS NULL THEN\\r\\n    RAISE NOTICE 'Office broker not found (contacto@lideresenseguros.com)';\\r\\n    RETURN 0;\\r\\n  END IF;\\r\\n  \\r\\n  -- Update pending items older than 3 months\\r\\n  UPDATE public.pending_items\\r\\n  SET \\r\\n    assigned_broker_id = v_office_broker_id,\\r\\n    status = 'auto_office',\\r\\n    assigned_at = NOW(),\\r\\n    assignment_notes = 'Auto-assigned to OFFICE after 3 months (90 days)'\\r\\n  WHERE assigned_broker_id IS NULL\\r\\n    AND status = 'open'\\r\\n    AND created_at <= NOW() - INTERVAL '90 days';\\r\\n  \\r\\n  GET DIAGNOSTICS v_updated_count = ROW_COUNT;\\r\\n  \\r\\n  RAISE NOTICE 'Auto-assigned % pending items to OFFICE', v_updated_count;\\r\\n  RETURN v_updated_count;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"assign_pending_to_office_after_3m\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.auto_create_pending_policy()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nBEGIN\\r\\n  -- Create pending_policy entry for this item\\r\\n  INSERT INTO public.pending_policy (pending_item_id, policy_number, client_name)\\r\\n  VALUES (NEW.id, NEW.policy_number, NEW.insured_name)\\r\\n  ON CONFLICT (pending_item_id, policy_number) DO NOTHING;\\r\\n  \\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"auto_create_pending_policy\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.batch_update_clients_policies_from_commissions()\\n RETURNS TABLE(updated_policies integer, updated_clients integer, errors text[])\\n LANGUAGE plpgsql\\nAS $function$\\r\\nDECLARE\\r\\n  v_updated_policies INT := 0;\\r\\n  v_updated_clients INT := 0;\\r\\n  v_errors TEXT[] := ARRAY[]::TEXT[];\\r\\n  v_record RECORD;\\r\\nBEGIN\\r\\n  -- Actualizar pólizas sin broker asignado\\r\\n  WITH updates AS (\\r\\n    UPDATE policies p\\r\\n    SET broker_id = ci.broker_id,\\r\\n        updated_at = NOW()\\r\\n    FROM (\\r\\n      SELECT DISTINCT ON (policy_number) \\r\\n        policy_number, \\r\\n        broker_id\\r\\n      FROM comm_items\\r\\n      WHERE broker_id IS NOT NULL\\r\\n      ORDER BY policy_number, created_at DESC\\r\\n    ) ci\\r\\n    WHERE p.policy_number = ci.policy_number\\r\\n      AND (p.broker_id IS NULL OR p.broker_id != ci.broker_id)\\r\\n    RETURNING 1\\r\\n  )\\r\\n  SELECT COUNT(*) INTO v_updated_policies FROM updates;\\r\\n\\r\\n  -- Actualizar clientes sin broker asignado\\r\\n  WITH updates AS (\\r\\n    UPDATE clients c\\r\\n    SET broker_id = p.broker_id,\\r\\n        updated_at = NOW()\\r\\n    FROM policies p\\r\\n    WHERE c.id = p.client_id\\r\\n      AND p.broker_id IS NOT NULL\\r\\n      AND (c.broker_id IS NULL OR c.broker_id != p.broker_id)\\r\\n    RETURNING 1\\r\\n  )\\r\\n  SELECT COUNT(*) INTO v_updated_clients FROM updates;\\r\\n\\r\\n  RETURN QUERY SELECT v_updated_policies, v_updated_clients, v_errors;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"batch_update_clients_policies_from_commissions\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.cleanup_processed_temp_imports()\\n RETURNS integer\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nDECLARE\\r\\n  deleted_count INTEGER;\\r\\nBEGIN\\r\\n  DELETE FROM public.temp_client_imports\\r\\n  WHERE import_status = 'processed'\\r\\n  AND processed_at < NOW() - INTERVAL '7 days';\\r\\n  \\r\\n  GET DIAGNOSTICS deleted_count = ROW_COUNT;\\r\\n  RETURN deleted_count;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"cleanup_processed_temp_imports\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.commissions_monthly_summary(p_year integer, p_broker uuid DEFAULT NULL::uuid)\\n RETURNS TABLE(month integer, broker_id uuid, total_amount numeric)\\n LANGUAGE sql\\n STABLE\\nAS $function$\\r\\n  select\\r\\n    extract(month from f.start_date)::int as month,\\r\\n    c.broker_id,\\r\\n    coalesce(sum(cd.amount), 0) as total_amount\\r\\n  from public.commission_details cd\\r\\n  join public.commissions c on c.id = cd.commission_id\\r\\n  join public.fortnights f on f.id = c.fortnight_id\\r\\n  where extract(year from f.start_date) = p_year\\r\\n    and (p_broker is null or c.broker_id = p_broker)\\r\\n  group by 1,2\\r\\n  order by 1,2;\\r\\n$function$\\n\",\n                    \"name\": \"commissions_monthly_summary\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.current_broker_id()\\n RETURNS uuid\\n LANGUAGE sql\\n STABLE\\nAS $function$\\r\\n  select nullif(auth.jwt()->'app_metadata'->>'broker_id','')::uuid;\\r\\n$function$\\n\",\n                    \"name\": \"current_broker_id\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.delete_processed_temp_import()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nBEGIN\\r\\n  -- Solo eliminar si fue procesado exitosamente\\r\\n  IF NEW.import_status = 'processed' THEN\\r\\n    -- Usar DELETE para remover el registro\\r\\n    DELETE FROM public.temp_client_imports\\r\\n    WHERE id = NEW.id;\\r\\n    \\r\\n    -- Retornar NULL porque el registro ya fue eliminado\\r\\n    RETURN NULL;\\r\\n  END IF;\\r\\n  \\r\\n  -- Si hay error, mantener el registro para revisión\\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"delete_processed_temp_import\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.ensure_auth_user_from_broker(p_broker_id uuid)\\n RETURNS uuid\\n LANGUAGE plpgsql\\n SET search_path TO 'public', 'pg_temp'\\nAS $function$\\r\\ndeclare\\r\\n  s record;\\r\\n  v_user_id uuid;\\r\\n  v_pwd  text;\\r\\n  v_hash text;\\r\\nbegin\\r\\n  -- 1) Lee fuente normalizada\\r\\n  select * into s\\r\\n  from public.brokers_sync_source\\r\\n  where broker_id = p_broker_id;\\r\\n\\r\\n  if s is null or s.email is null then\\r\\n    raise exception 'Broker % no encontrado o sin email', p_broker_id;\\r\\n  end if;\\r\\n\\r\\n  -- 2) ¿Ya existe user por email? (case-insensitive)\\r\\n  select u.id into v_user_id\\r\\n  from auth.users u\\r\\n  where lower(u.email) = lower(s.email)\\r\\n  limit 1;\\r\\n\\r\\n  -- 3) Hash temporal sólo si vamos a crear (evita pisar claves existentes)\\r\\n  v_pwd  := coalesce(s.plain_password, 'Temporal123!');\\r\\n  v_hash := public.hash_pwd(v_pwd);  -- usa extensions.gen_salt/crypt adentro\\r\\n\\r\\n  if v_user_id is null then\\r\\n    -- Crear usuario nuevo\\r\\n    insert into auth.users (id, email, encrypted_password, instance_id, role, email_confirmed_at)\\r\\n    values (\\r\\n      coalesce(s.auth_id, gen_random_uuid()),\\r\\n      s.email,\\r\\n      v_hash,\\r\\n      '00000000-0000-0000-0000-000000000000',\\r\\n      'authenticated',\\r\\n      now()\\r\\n    )\\r\\n    returning id into v_user_id;\\r\\n  else\\r\\n    -- Actualizar datos mínimos del existente (NO tocamos password si ya tiene)\\r\\n    update auth.users\\r\\n       set email = s.email\\r\\n     where id = v_user_id;\\r\\n  end if;\\r\\n\\r\\n  -- 4) Guarda relación en brokers\\r\\n  update public.brokers\\r\\n     set auth_id = v_user_id\\r\\n   where id = p_broker_id\\r\\n     and (auth_id is null or auth_id <> v_user_id);\\r\\n\\r\\n  return v_user_id;\\r\\nend\\r\\n$function$\\n\",\n                    \"name\": \"ensure_auth_user_from_broker\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.get_pending_items_grouped()\\n RETURNS TABLE(policy_number text, client_name text, total_items bigint, total_commission numeric, oldest_date timestamp with time zone, status text, items jsonb)\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nBEGIN\\r\\n  RETURN QUERY\\r\\n  SELECT \\r\\n    pp.policy_number,\\r\\n    pp.client_name,\\r\\n    COUNT(pi.id) AS total_items,\\r\\n    SUM(pi.commission_raw) AS total_commission,\\r\\n    MIN(pi.created_at) AS oldest_date,\\r\\n    pi.status,\\r\\n    jsonb_agg(\\r\\n      jsonb_build_object(\\r\\n        'id', pi.id,\\r\\n        'insured_name', pi.insured_name,\\r\\n        'commission_raw', pi.commission_raw,\\r\\n        'fortnight_id', pi.fortnight_id,\\r\\n        'created_at', pi.created_at\\r\\n      )\\r\\n    ) AS items\\r\\n  FROM public.pending_policy pp\\r\\n  INNER JOIN public.pending_items pi ON pi.id = pp.pending_item_id\\r\\n  GROUP BY pp.policy_number, pp.client_name, pi.status\\r\\n  ORDER BY oldest_date ASC;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"get_pending_items_grouped\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.handle_new_user_full()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nDECLARE\\r\\n  v_role public.role_enum := 'BROKER'; -- por defecto todos entran como BROKER; luego Master puede ascenderlos\\r\\n  v_name text;\\r\\n  v_pct numeric;\\r\\nBEGIN\\r\\n  -- Nombre: de metadata si viene, si no, parte local del email\\r\\n  v_name := COALESCE(\\r\\n    NEW.raw_user_meta_data->>'full_name',\\r\\n    split_part(NEW.email, '@', 1)\\r\\n  );\\r\\n\\r\\n  -- Porcentaje por defecto\\r\\n  IF lower(NEW.email) = 'contacto@lideresenseguros.com' THEN\\r\\n    v_pct := 1.00;\\r\\n    v_role := 'MASTER'; -- (opcional) si esa cuenta es la oficina y debe entrar como MASTER\\r\\n  ELSE\\r\\n    v_pct := 0.80;\\r\\n  END IF;\\r\\n\\r\\n  -- Crea profile si no existe\\r\\n  INSERT INTO public.profiles (id, full_name, role, email, created_at)\\r\\n  VALUES (NEW.id, v_name, v_role, NEW.email, NOW())\\r\\n  ON CONFLICT (id) DO NOTHING;\\r\\n\\r\\n  -- Crea broker enlazado si no existe\\r\\n  INSERT INTO public.brokers (id, name, email, percent_default, active, created_at, p_id)\\r\\n  VALUES (NEW.id, v_name, NEW.email, v_pct, TRUE, NOW(), NEW.id)\\r\\n  ON CONFLICT (id) DO NOTHING;\\r\\n\\r\\n  -- Enlaza profile → broker\\r\\n  UPDATE public.profiles\\r\\n  SET broker_id = NEW.id\\r\\n  WHERE id = NEW.id\\r\\n    AND broker_id IS NULL;\\r\\n\\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"handle_new_user_full\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.is_master()\\n RETURNS boolean\\n LANGUAGE sql\\n STABLE SECURITY DEFINER\\n SET search_path TO 'public'\\nAS $function$\\r\\n  SELECT EXISTS (\\r\\n    SELECT 1\\r\\n    FROM public.profiles p\\r\\n    WHERE p.id = auth.uid()\\r\\n      AND p.role = 'master'::public.role_enum\\r\\n  );\\r\\n$function$\\n\",\n                    \"name\": \"is_master\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.is_self(broker uuid)\\n RETURNS boolean\\n LANGUAGE sql\\n STABLE\\nAS $function$\\r\\n  select exists (\\r\\n    select 1\\r\\n    from public.brokers b\\r\\n    where b.id = broker\\r\\n      and b.p_id = auth.uid()\\r\\n  );\\r\\n$function$\\n\",\n                    \"name\": \"is_self\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.metrics_broker(p_broker uuid, p_fortnight uuid)\\n RETURNS TABLE(collected_amount numeric, morosity_over_60 numeric, pending_identify integer)\\n LANGUAGE sql\\n STABLE\\nAS $function$\\r\\n  select\\r\\n    coalesce(sum(c.total_amount),0),\\r\\n    coalesce(sum(case when f.end_date < now() - interval '60 days' then c.total_amount else 0 end),0),\\r\\n    0\\r\\n  from public.commissions c\\r\\n  join public.fortnights f on f.id = c.fortnight_id\\r\\n  where c.broker_id = p_broker\\r\\n    and c.fortnight_id = p_fortnight;\\r\\n$function$\\n\",\n                    \"name\": \"metrics_broker\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.process_temp_client_import()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nDECLARE\\r\\n  v_client_id UUID;\\r\\n  v_policy_id UUID;\\r\\n  v_broker_id UUID;\\r\\n  v_insurer_id UUID;\\r\\n  v_broker_default_percent NUMERIC(5,2);\\r\\nBEGIN\\r\\n  -- Solo procesar si tiene national_id (requisito para oficial)\\r\\n  IF NEW.national_id IS NULL OR NEW.import_status = 'processed' THEN\\r\\n    RETURN NEW;\\r\\n  END IF;\\r\\n\\r\\n  -- Resolver broker_id desde email\\r\\n  SELECT b.id, b.default_percent INTO v_broker_id, v_broker_default_percent\\r\\n  FROM public.brokers b\\r\\n  INNER JOIN public.profiles p ON p.id = b.id\\r\\n  WHERE p.email = NEW.broker_email;\\r\\n\\r\\n  IF v_broker_id IS NULL THEN\\r\\n    NEW.import_status = 'error';\\r\\n    NEW.error_message = 'Broker no encontrado con email: ' || NEW.broker_email;\\r\\n    NEW.processed_at = NOW();\\r\\n    RETURN NEW;\\r\\n  END IF;\\r\\n\\r\\n  -- Resolver insurer_id desde nombre\\r\\n  SELECT id INTO v_insurer_id\\r\\n  FROM public.insurers\\r\\n  WHERE LOWER(name) = LOWER(TRIM(NEW.insurer_name))\\r\\n  AND active = true;\\r\\n\\r\\n  IF v_insurer_id IS NULL THEN\\r\\n    NEW.import_status = 'error';\\r\\n    NEW.error_message = 'Aseguradora no encontrada o inactiva: ' || NEW.insurer_name;\\r\\n    NEW.processed_at = NOW();\\r\\n    RETURN NEW;\\r\\n  END IF;\\r\\n\\r\\n  -- Validar que policy_number no exista ya\\r\\n  SELECT id INTO v_policy_id\\r\\n  FROM public.policies\\r\\n  WHERE policy_number = NEW.policy_number;\\r\\n\\r\\n  IF v_policy_id IS NOT NULL THEN\\r\\n    NEW.import_status = 'error';\\r\\n    NEW.error_message = 'Número de póliza ya existe: ' || NEW.policy_number;\\r\\n    NEW.processed_at = NOW();\\r\\n    RETURN NEW;\\r\\n  END IF;\\r\\n\\r\\n  -- PASO 1: Buscar o crear cliente\\r\\n  SELECT id INTO v_client_id\\r\\n  FROM public.clients\\r\\n  WHERE national_id = NEW.national_id\\r\\n  AND broker_id = v_broker_id;\\r\\n\\r\\n  IF v_client_id IS NULL THEN\\r\\n    -- Crear nuevo cliente\\r\\n    INSERT INTO public.clients (\\r\\n      name, national_id, email, phone, broker_id, active\\r\\n    ) VALUES (\\r\\n      NEW.client_name,\\r\\n      NEW.national_id,\\r\\n      NEW.email,\\r\\n      NEW.phone,\\r\\n      v_broker_id,\\r\\n      true\\r\\n    ) RETURNING id INTO v_client_id;\\r\\n  ELSE\\r\\n    -- Cliente existe, actualizar datos si están presentes\\r\\n    UPDATE public.clients SET\\r\\n      name = COALESCE(NEW.client_name, name),\\r\\n      email = COALESCE(NEW.email, email),\\r\\n      phone = COALESCE(NEW.phone, phone)\\r\\n    WHERE id = v_client_id;\\r\\n  END IF;\\r\\n\\r\\n  -- PASO 2: Crear póliza\\r\\n  INSERT INTO public.policies (\\r\\n    client_id,\\r\\n    broker_id,\\r\\n    insurer_id,\\r\\n    policy_number,\\r\\n    ramo,\\r\\n    start_date,\\r\\n    renewal_date,\\r\\n    status,\\r\\n    percent_override\\r\\n  ) VALUES (\\r\\n    v_client_id,\\r\\n    v_broker_id,\\r\\n    v_insurer_id,\\r\\n    NEW.policy_number,\\r\\n    NEW.ramo,\\r\\n    NEW.start_date,\\r\\n    NEW.renewal_date,\\r\\n    COALESCE(NEW.status, 'active')::policy_status_enum,\\r\\n    NEW.percent_override -- NULL usa el default del broker\\r\\n  ) RETURNING id INTO v_policy_id;\\r\\n\\r\\n  -- Marcar como procesado exitosamente\\r\\n  NEW.import_status = 'processed';\\r\\n  NEW.error_message = NULL;\\r\\n  NEW.processed_at = NOW();\\r\\n\\r\\n  RETURN NEW;\\r\\n\\r\\nEXCEPTION WHEN OTHERS THEN\\r\\n  NEW.import_status = 'error';\\r\\n  NEW.error_message = SQLERRM;\\r\\n  NEW.processed_at = NOW();\\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"process_temp_client_import\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.profile_sync_from_auth(p_user_id uuid)\\n RETURNS void\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\n SET search_path TO 'public'\\nAS $function$\\r\\ndeclare\\r\\n  v_email text;\\r\\n  v_role_txt text;\\r\\n  v_broker uuid;\\r\\nbegin\\r\\n  select\\r\\n    u.email,\\r\\n    u.raw_app_meta_data->>'role',\\r\\n    nullif(u.raw_app_meta_data->>'broker_id','')::uuid\\r\\n  into v_email, v_role_txt, v_broker\\r\\n  from auth.users u\\r\\n  where u.id = p_user_id;\\r\\n\\r\\n  if v_role_txt is null or v_role_txt = '' then\\r\\n    v_role_txt := 'broker';\\r\\n  end if;\\r\\n\\r\\n  insert into public.profiles (id, email, role, broker_id)\\r\\n  values (p_user_id, v_email, v_role_txt::role_enum, v_broker)\\r\\n  on conflict (id) do update\\r\\n    set email = excluded.email,\\r\\n        role = excluded.role,\\r\\n        broker_id = excluded.broker_id;\\r\\nend$function$\\n\",\n                    \"name\": \"profile_sync_from_auth\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.set_user_role(p_email text, p_role role_enum, p_broker_id uuid DEFAULT NULL::uuid)\\n RETURNS void\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\n SET search_path TO 'public'\\nAS $function$\\r\\ndeclare\\r\\n  v_uid uuid;\\r\\n  v_meta jsonb;\\r\\nbegin\\r\\n  select id into v_uid\\r\\n  from auth.users\\r\\n  where lower(email) = lower(p_email)\\r\\n  limit 1;\\r\\n\\r\\n  if v_uid is null then\\r\\n    raise exception 'No existe usuario con email %', p_email;\\r\\n  end if;\\r\\n\\r\\n  select coalesce(raw_app_meta_data, '{}'::jsonb) into v_meta\\r\\n  from auth.users where id = v_uid;\\r\\n\\r\\n  v_meta := v_meta || jsonb_build_object('role', p_role::text);\\r\\n  if p_broker_id is not null then\\r\\n    v_meta := v_meta || jsonb_build_object('broker_id', p_broker_id::text);\\r\\n  end if;\\r\\n\\r\\n  update auth.users\\r\\n  set raw_app_meta_data = v_meta\\r\\n  where id = v_uid;\\r\\n\\r\\n  -- asegura profiles con email/rol/broker al día\\r\\n  perform public.profile_sync_from_auth(v_uid);\\r\\nend$function$\\n\",\n                    \"name\": \"set_user_role\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.set_user_role(p_email text, p_role text, p_broker_id uuid DEFAULT NULL::uuid)\\n RETURNS void\\n LANGUAGE plpgsql\\nAS $function$\\r\\ndeclare\\r\\n  v_meta jsonb;\\r\\nbegin\\r\\n  update auth.users\\r\\n  set raw_app_meta_data = coalesce(raw_app_meta_data, '{}'::jsonb)\\r\\n         || jsonb_build_object('role', p_role)\\r\\n         || case when p_broker_id is null then '{}'::jsonb\\r\\n                 else jsonb_build_object('broker_id', p_broker_id::text) end\\r\\n  where email = p_email;\\r\\nend;\\r\\n$function$\\n\",\n                    \"name\": \"set_user_role\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.trg_brokers_sync()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nbegin\\r\\n  perform public.ensure_auth_user_from_broker(coalesce(new.id, old.id));\\r\\n  return new;\\r\\nend $function$\\n\",\n                    \"name\": \"trg_brokers_sync\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.trg_brokers_sync_iud()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\r\\nbegin\\r\\n  if (tg_op in ('INSERT','UPDATE')) then\\r\\n    perform public.ensure_auth_user_from_broker(new.id);\\r\\n  elsif (tg_op = 'DELETE') then\\r\\n    -- Si eliminas el broker, opcionalmente elimina user/profile\\r\\n    -- delete from auth.users where id = old.auth_id;\\r\\n    -- delete from public.profiles where id = old.profile_id;\\r\\n    null;\\r\\n  end if;\\r\\n  return null;\\r\\nend\\r\\n$function$\\n\",\n                    \"name\": \"trg_brokers_sync_iud\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.update_can_be_paid()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\r\\nBEGIN\\r\\n  -- Actualizar el estado can_be_paid del pago\\r\\n  UPDATE pending_payments\\r\\n  SET \\r\\n    can_be_paid = NOT EXISTS (\\r\\n      SELECT 1 FROM payment_references\\r\\n      WHERE payment_id = NEW.payment_id\\r\\n      AND exists_in_bank = false\\r\\n    ),\\r\\n    total_received = (\\r\\n      SELECT COALESCE(SUM(amount), 0)\\r\\n      FROM payment_references\\r\\n      WHERE payment_id = NEW.payment_id\\r\\n    )\\r\\n  WHERE id = NEW.payment_id;\\r\\n  \\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"update_can_be_paid\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.update_clients_policies_from_commissions()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\r\\nDECLARE\\r\\n  v_policy_id UUID;\\r\\n  v_client_id UUID;\\r\\n  v_broker_id UUID;\\r\\n  v_policy_number TEXT;\\r\\nBEGIN\\r\\n  -- Solo procesar si el comm_item tiene broker_id\\r\\n  IF NEW.broker_id IS NULL THEN\\r\\n    RETURN NEW;\\r\\n  END IF;\\r\\n\\r\\n  v_broker_id := NEW.broker_id;\\r\\n  v_policy_number := NEW.policy_number;\\r\\n\\r\\n  -- Buscar la póliza por policy_number\\r\\n  SELECT id, client_id INTO v_policy_id, v_client_id\\r\\n  FROM policies\\r\\n  WHERE policy_number = v_policy_number\\r\\n  LIMIT 1;\\r\\n\\r\\n  -- Si encontramos la póliza\\r\\n  IF v_policy_id IS NOT NULL THEN\\r\\n    \\r\\n    -- 1. Actualizar broker_id en policies si no tiene uno asignado\\r\\n    UPDATE policies\\r\\n    SET broker_id = v_broker_id,\\r\\n        updated_at = NOW()\\r\\n    WHERE id = v_policy_id\\r\\n      AND (broker_id IS NULL OR broker_id != v_broker_id);\\r\\n\\r\\n    -- 2. Actualizar broker_id en clients si no tiene uno asignado\\r\\n    IF v_client_id IS NOT NULL THEN\\r\\n      UPDATE clients\\r\\n      SET broker_id = v_broker_id,\\r\\n          updated_at = NOW()\\r\\n      WHERE id = v_client_id\\r\\n        AND (broker_id IS NULL OR broker_id != v_broker_id);\\r\\n    END IF;\\r\\n\\r\\n  END IF;\\r\\n\\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"update_clients_policies_from_commissions\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.update_updated_at_column()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\r\\nBEGIN\\r\\n  NEW.updated_at = NOW();\\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"update_updated_at_column\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION public.validate_payment_references()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\r\\nBEGIN\\r\\n  -- Verificar si la referencia existe en bank_transfers\\r\\n  NEW.exists_in_bank := EXISTS (\\r\\n    SELECT 1 FROM bank_transfers \\r\\n    WHERE reference_number = NEW.reference_number\\r\\n  );\\r\\n  \\r\\n  RETURN NEW;\\r\\nEND;\\r\\n$function$\\n\",\n                    \"name\": \"validate_payment_references\"\n                }\n            ],\n            \"sequences\": [\n            ]\n        },\n        {\n            \"enums\": [\n                {\n                    \"enum\": \"action\",\n                    \"labels\": [\n                        \"INSERT\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                        \"TRUNCATE\",\n                        \"ERROR\"\n                    ]\n                },\n                {\n                    \"enum\": \"equality_op\",\n                    \"labels\": [\n                        \"eq\",\n                        \"neq\",\n                        \"lt\",\n                        \"lte\",\n                        \"gt\",\n                        \"gte\",\n                        \"in\"\n                    ]\n                }\n            ],\n            \"views\": [\n            ],\n            \"schema\": \"realtime\",\n            \"tables\": [\n                {\n                    \"table\": \"schema_migrations\",\n                    \"columns\": [\n                        {\n                            \"name\": \"version\",\n                            \"type\": \"bigint\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"inserted_at\",\n                            \"type\": \"timestamp(0) without time zone\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX schema_migrations_pkey ON realtime.schema_migrations USING btree (version)\",\n                            \"name\": \"schema_migrations_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"schema_migrations_pkey\",\n                            \"columns\": [\n                                \"version\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"subscription\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"bigint\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"subscription_id\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"entity\",\n                            \"type\": \"regclass\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"filters\",\n                            \"type\": \"realtime.user_defined_filter[]\",\n                            \"default\": \"'{}'::realtime.user_defined_filter[]\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"claims\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"claims_role\",\n                            \"type\": \"regrole\",\n                            \"default\": \"realtime.to_regrole((claims ->> 'role'::text))\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp without time zone\",\n                            \"default\": \"timezone('utc'::text, now())\",\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX pk_subscription ON realtime.subscription USING btree (id)\",\n                            \"name\": \"pk_subscription\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters)\",\n                            \"name\": \"subscription_subscription_id_entity_filters_key\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity)\",\n                            \"name\": \"ix_realtime_subscription_entity\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters()\",\n                            \"name\": \"tr_check_filters\",\n                            \"function\": \"subscription_check_filters\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": false,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"pk_subscription\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                }\n            ],\n            \"functions\": [\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024))\\n RETURNS SETOF realtime.wal_rls\\n LANGUAGE plpgsql\\nAS $function$\\ndeclare\\n-- Regclass of the table e.g. public.notes\\nentity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;\\n\\n-- I, U, D, T: insert, update ...\\naction realtime.action = (\\n    case wal ->> 'action'\\n        when 'I' then 'INSERT'\\n        when 'U' then 'UPDATE'\\n        when 'D' then 'DELETE'\\n        else 'ERROR'\\n    end\\n);\\n\\n-- Is row level security enabled for the table\\nis_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;\\n\\nsubscriptions realtime.subscription[] = array_agg(subs)\\n    from\\n        realtime.subscription subs\\n    where\\n        subs.entity = entity_;\\n\\n-- Subscription vars\\nroles regrole[] = array_agg(distinct us.claims_role::text)\\n    from\\n        unnest(subscriptions) us;\\n\\nworking_role regrole;\\nclaimed_role regrole;\\nclaims jsonb;\\n\\nsubscription_id uuid;\\nsubscription_has_access bool;\\nvisible_to_subscription_ids uuid[] = '{}';\\n\\n-- structured info for wal's columns\\ncolumns realtime.wal_column[];\\n-- previous identity values for update/delete\\nold_columns realtime.wal_column[];\\n\\nerror_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;\\n\\n-- Primary jsonb output for record\\noutput jsonb;\\n\\nbegin\\nperform set_config('role', null, true);\\n\\ncolumns =\\n    array_agg(\\n        (\\n            x->>'name',\\n            x->>'type',\\n            x->>'typeoid',\\n            realtime.cast(\\n                (x->'value') #>> '{}',\\n                coalesce(\\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\\n                    (x->>'type')::regtype\\n                )\\n            ),\\n            (pks ->> 'name') is not null,\\n            true\\n        )::realtime.wal_column\\n    )\\n    from\\n        jsonb_array_elements(wal -> 'columns') x\\n        left join jsonb_array_elements(wal -> 'pk') pks\\n            on (x ->> 'name') = (pks ->> 'name');\\n\\nold_columns =\\n    array_agg(\\n        (\\n            x->>'name',\\n            x->>'type',\\n            x->>'typeoid',\\n            realtime.cast(\\n                (x->'value') #>> '{}',\\n                coalesce(\\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\\n                    (x->>'type')::regtype\\n                )\\n            ),\\n            (pks ->> 'name') is not null,\\n            true\\n        )::realtime.wal_column\\n    )\\n    from\\n        jsonb_array_elements(wal -> 'identity') x\\n        left join jsonb_array_elements(wal -> 'pk') pks\\n            on (x ->> 'name') = (pks ->> 'name');\\n\\nfor working_role in select * from unnest(roles) loop\\n\\n    -- Update `is_selectable` for columns and old_columns\\n    columns =\\n        array_agg(\\n            (\\n                c.name,\\n                c.type_name,\\n                c.type_oid,\\n                c.value,\\n                c.is_pkey,\\n                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\\n            )::realtime.wal_column\\n        )\\n        from\\n            unnest(columns) c;\\n\\n    old_columns =\\n            array_agg(\\n                (\\n                    c.name,\\n                    c.type_name,\\n                    c.type_oid,\\n                    c.value,\\n                    c.is_pkey,\\n                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\\n                )::realtime.wal_column\\n            )\\n            from\\n                unnest(old_columns) c;\\n\\n    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then\\n        return next (\\n            jsonb_build_object(\\n                'schema', wal ->> 'schema',\\n                'table', wal ->> 'table',\\n                'type', action\\n            ),\\n            is_rls_enabled,\\n            -- subscriptions is already filtered by entity\\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\\n            array['Error 400: Bad Request, no primary key']\\n        )::realtime.wal_rls;\\n\\n    -- The claims role does not have SELECT permission to the primary key of entity\\n    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then\\n        return next (\\n            jsonb_build_object(\\n                'schema', wal ->> 'schema',\\n                'table', wal ->> 'table',\\n                'type', action\\n            ),\\n            is_rls_enabled,\\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\\n            array['Error 401: Unauthorized']\\n        )::realtime.wal_rls;\\n\\n    else\\n        output = jsonb_build_object(\\n            'schema', wal ->> 'schema',\\n            'table', wal ->> 'table',\\n            'type', action,\\n            'commit_timestamp', to_char(\\n                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),\\n                'YYYY-MM-DD\\\"T\\\"HH24:MI:SS.MS\\\"Z\\\"'\\n            ),\\n            'columns', (\\n                select\\n                    jsonb_agg(\\n                        jsonb_build_object(\\n                            'name', pa.attname,\\n                            'type', pt.typname\\n                        )\\n                        order by pa.attnum asc\\n                    )\\n                from\\n                    pg_attribute pa\\n                    join pg_type pt\\n                        on pa.atttypid = pt.oid\\n                where\\n                    attrelid = entity_\\n                    and attnum > 0\\n                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')\\n            )\\n        )\\n        -- Add \\\"record\\\" key for insert and update\\n        || case\\n            when action in ('INSERT', 'UPDATE') then\\n                jsonb_build_object(\\n                    'record',\\n                    (\\n                        select\\n                            jsonb_object_agg(\\n                                -- if unchanged toast, get column name and value from old record\\n                                coalesce((c).name, (oc).name),\\n                                case\\n                                    when (c).name is null then (oc).value\\n                                    else (c).value\\n                                end\\n                            )\\n                        from\\n                            unnest(columns) c\\n                            full outer join unnest(old_columns) oc\\n                                on (c).name = (oc).name\\n                        where\\n                            coalesce((c).is_selectable, (oc).is_selectable)\\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\\n                    )\\n                )\\n            else '{}'::jsonb\\n        end\\n        -- Add \\\"old_record\\\" key for update and delete\\n        || case\\n            when action = 'UPDATE' then\\n                jsonb_build_object(\\n                        'old_record',\\n                        (\\n                            select jsonb_object_agg((c).name, (c).value)\\n                            from unnest(old_columns) c\\n                            where\\n                                (c).is_selectable\\n                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\\n                        )\\n                    )\\n            when action = 'DELETE' then\\n                jsonb_build_object(\\n                    'old_record',\\n                    (\\n                        select jsonb_object_agg((c).name, (c).value)\\n                        from unnest(old_columns) c\\n                        where\\n                            (c).is_selectable\\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\\n                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey\\n                    )\\n                )\\n            else '{}'::jsonb\\n        end;\\n\\n        -- Create the prepared statement\\n        if is_rls_enabled and action <> 'DELETE' then\\n            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then\\n                deallocate walrus_rls_stmt;\\n            end if;\\n            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);\\n        end if;\\n\\n        visible_to_subscription_ids = '{}';\\n\\n        for subscription_id, claims in (\\n                select\\n                    subs.subscription_id,\\n                    subs.claims\\n                from\\n                    unnest(subscriptions) subs\\n                where\\n                    subs.entity = entity_\\n                    and subs.claims_role = working_role\\n                    and (\\n                        realtime.is_visible_through_filters(columns, subs.filters)\\n                        or (\\n                          action = 'DELETE'\\n                          and realtime.is_visible_through_filters(old_columns, subs.filters)\\n                        )\\n                    )\\n        ) loop\\n\\n            if not is_rls_enabled or action = 'DELETE' then\\n                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\\n            else\\n                -- Check if RLS allows the role to see the record\\n                perform\\n                    -- Trim leading and trailing quotes from working_role because set_config\\n                    -- doesn't recognize the role as valid if they are included\\n                    set_config('role', trim(both '\\\"' from working_role::text), true),\\n                    set_config('request.jwt.claims', claims::text, true);\\n\\n                execute 'execute walrus_rls_stmt' into subscription_has_access;\\n\\n                if subscription_has_access then\\n                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\\n                end if;\\n            end if;\\n        end loop;\\n\\n        perform set_config('role', null, true);\\n\\n        return next (\\n            output,\\n            is_rls_enabled,\\n            visible_to_subscription_ids,\\n            case\\n                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']\\n                else '{}'\\n            end\\n        )::realtime.wal_rls;\\n\\n    end if;\\nend loop;\\n\\nperform set_config('role', null, true);\\nend;\\n$function$\\n\",\n                    \"name\": \"apply_rls\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text)\\n RETURNS void\\n LANGUAGE plpgsql\\nAS $function$\\nDECLARE\\n    -- Declare a variable to hold the JSONB representation of the row\\n    row_data jsonb := '{}'::jsonb;\\nBEGIN\\n    IF level = 'STATEMENT' THEN\\n        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';\\n    END IF;\\n    -- Check the operation type and handle accordingly\\n    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN\\n        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);\\n        PERFORM realtime.send (row_data, event_name, topic_name);\\n    ELSE\\n        RAISE EXCEPTION 'Unexpected operation type: %', operation;\\n    END IF;\\nEXCEPTION\\n    WHEN OTHERS THEN\\n        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;\\nEND;\\n\\n$function$\\n\",\n                    \"name\": \"broadcast_changes\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[])\\n RETURNS text\\n LANGUAGE sql\\nAS $function$\\n      /*\\n      Builds a sql string that, if executed, creates a prepared statement to\\n      tests retrive a row from *entity* by its primary key columns.\\n      Example\\n          select realtime.build_prepared_statement_sql('public.notes', '{\\\"id\\\"}'::text[], '{\\\"bigint\\\"}'::text[])\\n      */\\n          select\\n      'prepare ' || prepared_statement_name || ' as\\n          select\\n              exists(\\n                  select\\n                      1\\n                  from\\n                      ' || entity || '\\n                  where\\n                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '\\n              )'\\n          from\\n              unnest(columns) pkc\\n          where\\n              pkc.is_pkey\\n          group by\\n              entity\\n      $function$\\n\",\n                    \"name\": \"build_prepared_statement_sql\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.\\\"cast\\\"(val text, type_ regtype)\\n RETURNS jsonb\\n LANGUAGE plpgsql\\n IMMUTABLE\\nAS $function$\\n    declare\\n      res jsonb;\\n    begin\\n      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;\\n      return res;\\n    end\\n    $function$\\n\",\n                    \"name\": \"cast\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text)\\n RETURNS boolean\\n LANGUAGE plpgsql\\n IMMUTABLE\\nAS $function$\\n      /*\\n      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness\\n      */\\n      declare\\n          op_symbol text = (\\n              case\\n                  when op = 'eq' then '='\\n                  when op = 'neq' then '!='\\n                  when op = 'lt' then '<'\\n                  when op = 'lte' then '<='\\n                  when op = 'gt' then '>'\\n                  when op = 'gte' then '>='\\n                  when op = 'in' then '= any'\\n                  else 'UNKNOWN OP'\\n              end\\n          );\\n          res boolean;\\n      begin\\n          execute format(\\n              'select %L::'|| type_::text || ' ' || op_symbol\\n              || ' ( %L::'\\n              || (\\n                  case\\n                      when op = 'in' then type_::text || '[]'\\n                      else type_::text end\\n              )\\n              || ')', val_1, val_2) into res;\\n          return res;\\n      end;\\n      $function$\\n\",\n                    \"name\": \"check_equality_op\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[])\\n RETURNS boolean\\n LANGUAGE sql\\n IMMUTABLE\\nAS $function$\\n    /*\\n    Should the record be visible (true) or filtered out (false) after *filters* are applied\\n    */\\n        select\\n            -- Default to allowed when no filters present\\n            $2 is null -- no filters. this should not happen because subscriptions has a default\\n            or array_length($2, 1) is null -- array length of an empty array is null\\n            or bool_and(\\n                coalesce(\\n                    realtime.check_equality_op(\\n                        op:=f.op,\\n                        type_:=coalesce(\\n                            col.type_oid::regtype, -- null when wal2json version <= 2.4\\n                            col.type_name::regtype\\n                        ),\\n                        -- cast jsonb to text\\n                        val_1:=col.value #>> '{}',\\n                        val_2:=f.value\\n                    ),\\n                    false -- if null, filter does not match\\n                )\\n            )\\n        from\\n            unnest(filters) f\\n            join unnest(columns) col\\n                on f.column_name = col.name;\\n    $function$\\n\",\n                    \"name\": \"is_visible_through_filters\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer)\\n RETURNS SETOF realtime.wal_rls\\n LANGUAGE sql\\n SET log_min_messages TO 'fatal'\\nAS $function$\\n      with pub as (\\n        select\\n          concat_ws(\\n            ',',\\n            case when bool_or(pubinsert) then 'insert' else null end,\\n            case when bool_or(pubupdate) then 'update' else null end,\\n            case when bool_or(pubdelete) then 'delete' else null end\\n          ) as w2j_actions,\\n          coalesce(\\n            string_agg(\\n              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),\\n              ','\\n            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),\\n            ''\\n          ) w2j_add_tables\\n        from\\n          pg_publication pp\\n          left join pg_publication_tables ppt\\n            on pp.pubname = ppt.pubname\\n        where\\n          pp.pubname = publication\\n        group by\\n          pp.pubname\\n        limit 1\\n      ),\\n      w2j as (\\n        select\\n          x.*, pub.w2j_add_tables\\n        from\\n          pub,\\n          pg_logical_slot_get_changes(\\n            slot_name, null, max_changes,\\n            'include-pk', 'true',\\n            'include-transaction', 'false',\\n            'include-timestamp', 'true',\\n            'include-type-oids', 'true',\\n            'format-version', '2',\\n            'actions', pub.w2j_actions,\\n            'add-tables', pub.w2j_add_tables\\n          ) x\\n      )\\n      select\\n        xyz.wal,\\n        xyz.is_rls_enabled,\\n        xyz.subscription_ids,\\n        xyz.errors\\n      from\\n        w2j,\\n        realtime.apply_rls(\\n          wal := w2j.data::jsonb,\\n          max_record_bytes := max_record_bytes\\n        ) xyz(wal, is_rls_enabled, subscription_ids, errors)\\n      where\\n        w2j.w2j_add_tables <> ''\\n        and xyz.subscription_ids[1] is not null\\n    $function$\\n\",\n                    \"name\": \"list_changes\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.quote_wal2json(entity regclass)\\n RETURNS text\\n LANGUAGE sql\\n IMMUTABLE STRICT\\nAS $function$\\n      select\\n        (\\n          select string_agg('' || ch,'')\\n          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)\\n          where\\n            not (x.idx = 1 and x.ch = '\\\"')\\n            and not (\\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\\n              and x.ch = '\\\"'\\n            )\\n        )\\n        || '.'\\n        || (\\n          select string_agg('' || ch,'')\\n          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)\\n          where\\n            not (x.idx = 1 and x.ch = '\\\"')\\n            and not (\\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\\n              and x.ch = '\\\"'\\n            )\\n          )\\n      from\\n        pg_class pc\\n        join pg_namespace nsp\\n          on pc.relnamespace = nsp.oid\\n      where\\n        pc.oid = entity\\n    $function$\\n\",\n                    \"name\": \"quote_wal2json\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true)\\n RETURNS void\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n  BEGIN\\n    -- Set the topic configuration\\n    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);\\n\\n    -- Attempt to insert the message\\n    INSERT INTO realtime.messages (payload, event, topic, private, extension)\\n    VALUES (payload, event, topic, private, 'broadcast');\\n  EXCEPTION\\n    WHEN OTHERS THEN\\n      -- Capture and notify the error\\n      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;\\n  END;\\nEND;\\n$function$\\n\",\n                    \"name\": \"send\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.subscription_check_filters()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\n    /*\\n    Validates that the user defined filters for a subscription:\\n    - refer to valid columns that the claimed role may access\\n    - values are coercable to the correct column type\\n    */\\n    declare\\n        col_names text[] = coalesce(\\n                array_agg(c.column_name order by c.ordinal_position),\\n                '{}'::text[]\\n            )\\n            from\\n                information_schema.columns c\\n            where\\n                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity\\n                and pg_catalog.has_column_privilege(\\n                    (new.claims ->> 'role'),\\n                    format('%I.%I', c.table_schema, c.table_name)::regclass,\\n                    c.column_name,\\n                    'SELECT'\\n                );\\n        filter realtime.user_defined_filter;\\n        col_type regtype;\\n\\n        in_val jsonb;\\n    begin\\n        for filter in select * from unnest(new.filters) loop\\n            -- Filtered column is valid\\n            if not filter.column_name = any(col_names) then\\n                raise exception 'invalid column for filter %', filter.column_name;\\n            end if;\\n\\n            -- Type is sanitized and safe for string interpolation\\n            col_type = (\\n                select atttypid::regtype\\n                from pg_catalog.pg_attribute\\n                where attrelid = new.entity\\n                      and attname = filter.column_name\\n            );\\n            if col_type is null then\\n                raise exception 'failed to lookup type for column %', filter.column_name;\\n            end if;\\n\\n            -- Set maximum number of entries for in filter\\n            if filter.op = 'in'::realtime.equality_op then\\n                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);\\n                if coalesce(jsonb_array_length(in_val), 0) > 100 then\\n                    raise exception 'too many values for `in` filter. Maximum 100';\\n                end if;\\n            else\\n                -- raises an exception if value is not coercable to type\\n                perform realtime.cast(filter.value, col_type);\\n            end if;\\n\\n        end loop;\\n\\n        -- Apply consistent order to filters so the unique constraint on\\n        -- (subscription_id, entity, filters) can't be tricked by a different filter order\\n        new.filters = coalesce(\\n            array_agg(f order by f.column_name, f.op, f.value),\\n            '{}'\\n        ) from unnest(new.filters) f;\\n\\n        return new;\\n    end;\\n    $function$\\n\",\n                    \"name\": \"subscription_check_filters\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.to_regrole(role_name text)\\n RETURNS regrole\\n LANGUAGE sql\\n IMMUTABLE\\nAS $function$ select role_name::regrole $function$\\n\",\n                    \"name\": \"to_regrole\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION realtime.topic()\\n RETURNS text\\n LANGUAGE sql\\n STABLE\\nAS $function$\\nselect nullif(current_setting('realtime.topic', true), '')::text;\\n$function$\\n\",\n                    \"name\": \"topic\"\n                }\n            ],\n            \"sequences\": [\n            ]\n        },\n        {\n            \"enums\": [\n                {\n                    \"enum\": \"buckettype\",\n                    \"labels\": [\n                        \"STANDARD\",\n                        \"ANALYTICS\"\n                    ]\n                }\n            ],\n            \"views\": [\n            ],\n            \"schema\": \"storage\",\n            \"tables\": [\n                {\n                    \"table\": \"buckets\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"owner\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"public\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"avif_autodetection\",\n                            \"type\": \"boolean\",\n                            \"default\": \"false\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"file_size_limit\",\n                            \"type\": \"bigint\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"allowed_mime_types\",\n                            \"type\": \"text[]\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"owner_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"type\",\n                            \"type\": \"storage.buckettype\",\n                            \"default\": \"'STANDARD'::storage.buckettype\",\n                            \"ordinal\": 11,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX buckets_pkey ON storage.buckets USING btree (id)\",\n                            \"name\": \"buckets_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name)\",\n                            \"name\": \"bname\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER enforce_bucket_name_length_trigger BEFORE INSERT OR UPDATE OF name ON storage.buckets FOR EACH ROW EXECUTE FUNCTION storage.enforce_bucket_name_length()\",\n                            \"name\": \"enforce_bucket_name_length_trigger\",\n                            \"function\": \"enforce_bucket_name_length\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"buckets_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"buckets_analytics\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"type\",\n                            \"type\": \"storage.buckettype\",\n                            \"default\": \"'ANALYTICS'::storage.buckettype\",\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"format\",\n                            \"type\": \"text\",\n                            \"default\": \"'ICEBERG'::text\",\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX buckets_analytics_pkey ON storage.buckets_analytics USING btree (id)\",\n                            \"name\": \"buckets_analytics_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"buckets_analytics_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"migrations\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"integer\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"character varying(100)\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"hash\",\n                            \"type\": \"character varying(40)\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"executed_at\",\n                            \"type\": \"timestamp without time zone\",\n                            \"default\": \"CURRENT_TIMESTAMP\",\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX migrations_pkey ON storage.migrations USING btree (id)\",\n                            \"name\": \"migrations_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX migrations_name_key ON storage.migrations USING btree (name)\",\n                            \"name\": \"migrations_name_key\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"migrations_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                        {\n                            \"name\": \"migrations_name_key\",\n                            \"columns\": [\n                                \"name\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"table\": \"objects\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bucket_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"owner\",\n                            \"type\": \"uuid\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 6,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"last_accessed_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"metadata\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"path_tokens\",\n                            \"type\": \"text[]\",\n                            \"default\": \"string_to_array(name, '/'::text)\",\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"version\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 10,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"owner_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 11,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"user_metadata\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 12,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"level\",\n                            \"type\": \"integer\",\n                            \"default\": null,\n                            \"ordinal\": 13,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX objects_pkey ON storage.objects USING btree (id)\",\n                            \"name\": \"objects_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name)\",\n                            \"name\": \"bucketid_objname\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops)\",\n                            \"name\": \"name_prefix_search\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE \\\"C\\\")\",\n                            \"name\": \"idx_objects_bucket_id_name\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX idx_name_bucket_level_unique ON storage.objects USING btree (name COLLATE \\\"C\\\", bucket_id, level)\",\n                            \"name\": \"idx_name_bucket_level_unique\"\n                        },\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX objects_bucket_id_level_idx ON storage.objects USING btree (bucket_id, level, name COLLATE \\\"C\\\")\",\n                            \"name\": \"objects_bucket_id_level_idx\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_objects_lower_name ON storage.objects USING btree ((path_tokens[level]), lower(name) text_pattern_ops, bucket_id, level)\",\n                            \"name\": \"idx_objects_lower_name\"\n                        }\n                    ],\n                    \"policies\": [\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"public\"\n                            ],\n                            \"using\": \"(bucket_id = 'avatars'::text)\",\n                            \"policy\": \"avatars_public_read\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"DELETE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((bucket_id = 'avatars'::text) AND ((name ~~ ((auth.uid())::text || '/%'::text)) OR is_master()))\",\n                            \"policy\": \"avatars_user_delete\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"INSERT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": null,\n                            \"policy\": \"avatars_user_insert\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((bucket_id = 'avatars'::text) AND (name ~~ ((auth.uid())::text || '/%'::text)))\"\n                        },\n                        {\n                            \"cmd\": \"UPDATE\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((bucket_id = 'avatars'::text) AND ((name ~~ ((auth.uid())::text || '/%'::text)) OR is_master()))\",\n                            \"policy\": \"avatars_user_update\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((bucket_id = 'avatars'::text) AND ((name ~~ ((auth.uid())::text || '/%'::text)) OR is_master()))\"\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((bucket_id = 'descargas'::text) AND is_master())\",\n                            \"policy\": \"descargas_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((bucket_id = 'descargas'::text) AND is_master())\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"(bucket_id = 'descargas'::text)\",\n                            \"policy\": \"descargas_read_auth\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"ALL\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((bucket_id = 'pendientes'::text) AND is_master())\",\n                            \"policy\": \"pendientes_cud_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": \"((bucket_id = 'pendientes'::text) AND is_master())\"\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((bucket_id = 'pendientes'::text) AND (lower(name) ~~ (('%/'::text || lower((auth.jwt() ->> 'email'::text))) || '/%'::text)))\",\n                            \"policy\": \"pendientes_read_broker\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        },\n                        {\n                            \"cmd\": \"SELECT\",\n                            \"roles\": [\n                                \"authenticated\"\n                            ],\n                            \"using\": \"((bucket_id = 'pendientes'::text) AND is_master())\",\n                            \"policy\": \"pendientes_read_master\",\n                            \"permissive\": \"PERMISSIVE\",\n                            \"with_check\": null\n                        }\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER objects_delete_delete_prefix AFTER DELETE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger()\",\n                            \"name\": \"objects_delete_delete_prefix\",\n                            \"function\": \"delete_prefix_hierarchy_trigger\"\n                        },\n                        {\n                            \"def\": \"CREATE TRIGGER objects_insert_create_prefix BEFORE INSERT ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.objects_insert_prefix_trigger()\",\n                            \"name\": \"objects_insert_create_prefix\",\n                            \"function\": \"objects_insert_prefix_trigger\"\n                        },\n                        {\n                            \"def\": \"CREATE TRIGGER objects_update_create_prefix BEFORE UPDATE ON storage.objects FOR EACH ROW WHEN (new.name <> old.name OR new.bucket_id <> old.bucket_id) EXECUTE FUNCTION storage.objects_update_prefix_trigger()\",\n                            \"name\": \"objects_update_create_prefix\",\n                            \"function\": \"objects_update_prefix_trigger\"\n                        },\n                        {\n                            \"def\": \"CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column()\",\n                            \"name\": \"update_objects_updated_at\",\n                            \"function\": \"update_updated_at_column\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"buckets\",\n                                \"schema\": \"storage\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"objects_bucketId_fkey\",\n                            \"columns\": [\n                                \"bucket_id\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"objects_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"prefixes\",\n                    \"columns\": [\n                        {\n                            \"name\": \"bucket_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"level\",\n                            \"type\": \"integer\",\n                            \"default\": \"storage.get_level(name)\",\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 4,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 5,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX prefixes_pkey ON storage.prefixes USING btree (bucket_id, level, name)\",\n                            \"name\": \"prefixes_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_prefixes_lower_name ON storage.prefixes USING btree (bucket_id, level, ((string_to_array(name, '/'::text))[level]), lower(name) text_pattern_ops)\",\n                            \"name\": \"idx_prefixes_lower_name\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                        {\n                            \"def\": \"CREATE TRIGGER prefixes_create_hierarchy BEFORE INSERT ON storage.prefixes FOR EACH ROW WHEN (pg_trigger_depth() < 1) EXECUTE FUNCTION storage.prefixes_insert_trigger()\",\n                            \"name\": \"prefixes_create_hierarchy\",\n                            \"function\": \"prefixes_insert_trigger\"\n                        },\n                        {\n                            \"def\": \"CREATE TRIGGER prefixes_delete_hierarchy AFTER DELETE ON storage.prefixes FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger()\",\n                            \"name\": \"prefixes_delete_hierarchy\",\n                            \"function\": \"delete_prefix_hierarchy_trigger\"\n                        }\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"buckets\",\n                                \"schema\": \"storage\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"prefixes_bucketId_fkey\",\n                            \"columns\": [\n                                \"bucket_id\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"prefixes_pkey\",\n                            \"columns\": [\n                                \"bucket_id\",\n                                \"name\",\n                                \"level\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"s3_multipart_uploads\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"in_progress_size\",\n                            \"type\": \"bigint\",\n                            \"default\": \"0\",\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"upload_signature\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bucket_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"key\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"version\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"owner_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 8,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"user_metadata\",\n                            \"type\": \"jsonb\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": false\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX s3_multipart_uploads_pkey ON storage.s3_multipart_uploads USING btree (id)\",\n                            \"name\": \"s3_multipart_uploads_pkey\"\n                        },\n                        {\n                            \"def\": \"CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at)\",\n                            \"name\": \"idx_multipart_uploads_list\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"buckets\",\n                                \"schema\": \"storage\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"s3_multipart_uploads_bucket_id_fkey\",\n                            \"columns\": [\n                                \"bucket_id\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"s3_multipart_uploads_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                },\n                {\n                    \"table\": \"s3_multipart_uploads_parts\",\n                    \"columns\": [\n                        {\n                            \"name\": \"id\",\n                            \"type\": \"uuid\",\n                            \"default\": \"gen_random_uuid()\",\n                            \"ordinal\": 1,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"upload_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 2,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"size\",\n                            \"type\": \"bigint\",\n                            \"default\": \"0\",\n                            \"ordinal\": 3,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"part_number\",\n                            \"type\": \"integer\",\n                            \"default\": null,\n                            \"ordinal\": 4,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"bucket_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 5,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"key\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 6,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"etag\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 7,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"owner_id\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 8,\n                            \"not_null\": false\n                        },\n                        {\n                            \"name\": \"version\",\n                            \"type\": \"text\",\n                            \"default\": null,\n                            \"ordinal\": 9,\n                            \"not_null\": true\n                        },\n                        {\n                            \"name\": \"created_at\",\n                            \"type\": \"timestamp with time zone\",\n                            \"default\": \"now()\",\n                            \"ordinal\": 10,\n                            \"not_null\": true\n                        }\n                    ],\n                    \"indexes\": [\n                        {\n                            \"def\": \"CREATE UNIQUE INDEX s3_multipart_uploads_parts_pkey ON storage.s3_multipart_uploads_parts USING btree (id)\",\n                            \"name\": \"s3_multipart_uploads_parts_pkey\"\n                        }\n                    ],\n                    \"policies\": [\n                    ],\n                    \"triggers\": [\n                    ],\n                    \"rls_forced\": false,\n                    \"rls_enabled\": true,\n                    \"foreign_keys\": [\n                        {\n                            \"ref\": {\n                                \"table\": \"buckets\",\n                                \"schema\": \"storage\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"s3_multipart_uploads_parts_bucket_id_fkey\",\n                            \"columns\": [\n                                \"bucket_id\"\n                            ],\n                            \"on_delete\": \"a\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        },\n                        {\n                            \"ref\": {\n                                \"table\": \"s3_multipart_uploads\",\n                                \"schema\": \"storage\",\n                                \"columns\": [\n                                    \"id\"\n                                ]\n                            },\n                            \"name\": \"s3_multipart_uploads_parts_upload_id_fkey\",\n                            \"columns\": [\n                                \"upload_id\"\n                            ],\n                            \"on_delete\": \"c\",\n                            \"on_update\": \"a\",\n                            \"match_type\": \"s\"\n                        }\n                    ],\n                    \"primary_keys\": [\n                        {\n                            \"name\": \"s3_multipart_uploads_parts_pkey\",\n                            \"columns\": [\n                                \"id\"\n                            ]\n                        }\n                    ],\n                    \"unique_constraints\": [\n                    ]\n                }\n            ],\n            \"functions\": [\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.add_prefixes(_bucket_id text, _name text)\\n RETURNS void\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nDECLARE\\n    prefixes text[];\\nBEGIN\\n    prefixes := \\\"storage\\\".\\\"get_prefixes\\\"(\\\"_name\\\");\\n\\n    IF array_length(prefixes, 1) > 0 THEN\\n        INSERT INTO storage.prefixes (name, bucket_id)\\n        SELECT UNNEST(prefixes) as name, \\\"_bucket_id\\\" ON CONFLICT DO NOTHING;\\n    END IF;\\nEND;\\n$function$\\n\",\n                    \"name\": \"add_prefixes\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb)\\n RETURNS void\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n  INSERT INTO \\\"storage\\\".\\\"objects\\\" (\\\"bucket_id\\\", \\\"name\\\", \\\"owner\\\", \\\"metadata\\\") VALUES (bucketid, name, owner, metadata);\\n  -- hack to rollback the successful insert\\n  RAISE sqlstate 'PT200' using\\n  message = 'ROLLBACK',\\n  detail = 'rollback successful insert';\\nEND\\n$function$\\n\",\n                    \"name\": \"can_insert_object\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.delete_leaf_prefixes(bucket_ids text[], names text[])\\n RETURNS void\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nDECLARE\\n    v_rows_deleted integer;\\nBEGIN\\n    LOOP\\n        WITH candidates AS (\\n            SELECT DISTINCT\\n                t.bucket_id,\\n                unnest(storage.get_prefixes(t.name)) AS name\\n            FROM unnest(bucket_ids, names) AS t(bucket_id, name)\\n        ),\\n        uniq AS (\\n             SELECT\\n                 bucket_id,\\n                 name,\\n                 storage.get_level(name) AS level\\n             FROM candidates\\n             WHERE name <> ''\\n             GROUP BY bucket_id, name\\n        ),\\n        leaf AS (\\n             SELECT\\n                 p.bucket_id,\\n                 p.name,\\n                 p.level\\n             FROM storage.prefixes AS p\\n                  JOIN uniq AS u\\n                       ON u.bucket_id = p.bucket_id\\n                           AND u.name = p.name\\n                           AND u.level = p.level\\n             WHERE NOT EXISTS (\\n                 SELECT 1\\n                 FROM storage.objects AS o\\n                 WHERE o.bucket_id = p.bucket_id\\n                   AND o.level = p.level + 1\\n                   AND o.name COLLATE \\\"C\\\" LIKE p.name || '/%'\\n             )\\n             AND NOT EXISTS (\\n                 SELECT 1\\n                 FROM storage.prefixes AS c\\n                 WHERE c.bucket_id = p.bucket_id\\n                   AND c.level = p.level + 1\\n                   AND c.name COLLATE \\\"C\\\" LIKE p.name || '/%'\\n             )\\n        )\\n        DELETE\\n        FROM storage.prefixes AS p\\n            USING leaf AS l\\n        WHERE p.bucket_id = l.bucket_id\\n          AND p.name = l.name\\n          AND p.level = l.level;\\n\\n        GET DIAGNOSTICS v_rows_deleted = ROW_COUNT;\\n        EXIT WHEN v_rows_deleted = 0;\\n    END LOOP;\\nEND;\\n$function$\\n\",\n                    \"name\": \"delete_leaf_prefixes\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.delete_prefix(_bucket_id text, _name text)\\n RETURNS boolean\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nBEGIN\\n    -- Check if we can delete the prefix\\n    IF EXISTS(\\n        SELECT FROM \\\"storage\\\".\\\"prefixes\\\"\\n        WHERE \\\"prefixes\\\".\\\"bucket_id\\\" = \\\"_bucket_id\\\"\\n          AND level = \\\"storage\\\".\\\"get_level\\\"(\\\"_name\\\") + 1\\n          AND \\\"prefixes\\\".\\\"name\\\" COLLATE \\\"C\\\" LIKE \\\"_name\\\" || '/%'\\n        LIMIT 1\\n    )\\n    OR EXISTS(\\n        SELECT FROM \\\"storage\\\".\\\"objects\\\"\\n        WHERE \\\"objects\\\".\\\"bucket_id\\\" = \\\"_bucket_id\\\"\\n          AND \\\"storage\\\".\\\"get_level\\\"(\\\"objects\\\".\\\"name\\\") = \\\"storage\\\".\\\"get_level\\\"(\\\"_name\\\") + 1\\n          AND \\\"objects\\\".\\\"name\\\" COLLATE \\\"C\\\" LIKE \\\"_name\\\" || '/%'\\n        LIMIT 1\\n    ) THEN\\n    -- There are sub-objects, skip deletion\\n    RETURN false;\\n    ELSE\\n        DELETE FROM \\\"storage\\\".\\\"prefixes\\\"\\n        WHERE \\\"prefixes\\\".\\\"bucket_id\\\" = \\\"_bucket_id\\\"\\n          AND level = \\\"storage\\\".\\\"get_level\\\"(\\\"_name\\\")\\n          AND \\\"prefixes\\\".\\\"name\\\" = \\\"_name\\\";\\n        RETURN true;\\n    END IF;\\nEND;\\n$function$\\n\",\n                    \"name\": \"delete_prefix\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.delete_prefix_hierarchy_trigger()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nDECLARE\\n    prefix text;\\nBEGIN\\n    prefix := \\\"storage\\\".\\\"get_prefix\\\"(OLD.\\\"name\\\");\\n\\n    IF coalesce(prefix, '') != '' THEN\\n        PERFORM \\\"storage\\\".\\\"delete_prefix\\\"(OLD.\\\"bucket_id\\\", prefix);\\n    END IF;\\n\\n    RETURN OLD;\\nEND;\\n$function$\\n\",\n                    \"name\": \"delete_prefix_hierarchy_trigger\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.enforce_bucket_name_length()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nbegin\\n    if length(new.name) > 100 then\\n        raise exception 'bucket name \\\"%\\\" is too long (% characters). Max is 100.', new.name, length(new.name);\\n    end if;\\n    return new;\\nend;\\n$function$\\n\",\n                    \"name\": \"enforce_bucket_name_length\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.extension(name text)\\n RETURNS text\\n LANGUAGE plpgsql\\n IMMUTABLE\\nAS $function$\\nDECLARE\\n    _parts text[];\\n    _filename text;\\nBEGIN\\n    SELECT string_to_array(name, '/') INTO _parts;\\n    SELECT _parts[array_length(_parts,1)] INTO _filename;\\n    RETURN reverse(split_part(reverse(_filename), '.', 1));\\nEND\\n$function$\\n\",\n                    \"name\": \"extension\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.filename(name text)\\n RETURNS text\\n LANGUAGE plpgsql\\nAS $function$\\nDECLARE\\n_parts text[];\\nBEGIN\\n\\tselect string_to_array(name, '/') into _parts;\\n\\treturn _parts[array_length(_parts,1)];\\nEND\\n$function$\\n\",\n                    \"name\": \"filename\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.foldername(name text)\\n RETURNS text[]\\n LANGUAGE plpgsql\\n IMMUTABLE\\nAS $function$\\nDECLARE\\n    _parts text[];\\nBEGIN\\n    -- Split on \\\"/\\\" to get path segments\\n    SELECT string_to_array(name, '/') INTO _parts;\\n    -- Return everything except the last segment\\n    RETURN _parts[1 : array_length(_parts,1) - 1];\\nEND\\n$function$\\n\",\n                    \"name\": \"foldername\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.get_level(name text)\\n RETURNS integer\\n LANGUAGE sql\\n IMMUTABLE STRICT\\nAS $function$\\nSELECT array_length(string_to_array(\\\"name\\\", '/'), 1);\\n$function$\\n\",\n                    \"name\": \"get_level\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.get_prefix(name text)\\n RETURNS text\\n LANGUAGE sql\\n IMMUTABLE STRICT\\nAS $function$\\nSELECT\\n    CASE WHEN strpos(\\\"name\\\", '/') > 0 THEN\\n             regexp_replace(\\\"name\\\", '[\\\\/]{1}[^\\\\/]+\\\\/?$', '')\\n         ELSE\\n             ''\\n        END;\\n$function$\\n\",\n                    \"name\": \"get_prefix\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.get_prefixes(name text)\\n RETURNS text[]\\n LANGUAGE plpgsql\\n IMMUTABLE STRICT\\nAS $function$\\nDECLARE\\n    parts text[];\\n    prefixes text[];\\n    prefix text;\\nBEGIN\\n    -- Split the name into parts by '/'\\n    parts := string_to_array(\\\"name\\\", '/');\\n    prefixes := '{}';\\n\\n    -- Construct the prefixes, stopping one level below the last part\\n    FOR i IN 1..array_length(parts, 1) - 1 LOOP\\n            prefix := array_to_string(parts[1:i], '/');\\n            prefixes := array_append(prefixes, prefix);\\n    END LOOP;\\n\\n    RETURN prefixes;\\nEND;\\n$function$\\n\",\n                    \"name\": \"get_prefixes\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.get_size_by_bucket()\\n RETURNS TABLE(size bigint, bucket_id text)\\n LANGUAGE plpgsql\\n STABLE\\nAS $function$\\nBEGIN\\n    return query\\n        select sum((metadata->>'size')::bigint) as size, obj.bucket_id\\n        from \\\"storage\\\".objects as obj\\n        group by obj.bucket_id;\\nEND\\n$function$\\n\",\n                    \"name\": \"get_size_by_bucket\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text)\\n RETURNS TABLE(key text, id text, created_at timestamp with time zone)\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n    RETURN QUERY EXECUTE\\n        'SELECT DISTINCT ON(key COLLATE \\\"C\\\") * from (\\n            SELECT\\n                CASE\\n                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\\n                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))\\n                    ELSE\\n                        key\\n                END AS key, id, created_at\\n            FROM\\n                storage.s3_multipart_uploads\\n            WHERE\\n                bucket_id = $5 AND\\n                key ILIKE $1 || ''%'' AND\\n                CASE\\n                    WHEN $4 != '''' AND $6 = '''' THEN\\n                        CASE\\n                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\\n                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE \\\"C\\\" > $4\\n                            ELSE\\n                                key COLLATE \\\"C\\\" > $4\\n                            END\\n                    ELSE\\n                        true\\n                END AND\\n                CASE\\n                    WHEN $6 != '''' THEN\\n                        id COLLATE \\\"C\\\" > $6\\n                    ELSE\\n                        true\\n                    END\\n            ORDER BY\\n                key COLLATE \\\"C\\\" ASC, created_at ASC) as e order by key COLLATE \\\"C\\\" LIMIT $3'\\n        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;\\nEND;\\n$function$\\n\",\n                    \"name\": \"list_multipart_uploads_with_delimiter\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text)\\n RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n    RETURN QUERY EXECUTE\\n        'SELECT DISTINCT ON(name COLLATE \\\"C\\\") * from (\\n            SELECT\\n                CASE\\n                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\\n                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))\\n                    ELSE\\n                        name\\n                END AS name, id, metadata, updated_at\\n            FROM\\n                storage.objects\\n            WHERE\\n                bucket_id = $5 AND\\n                name ILIKE $1 || ''%'' AND\\n                CASE\\n                    WHEN $6 != '''' THEN\\n                    name COLLATE \\\"C\\\" > $6\\n                ELSE true END\\n                AND CASE\\n                    WHEN $4 != '''' THEN\\n                        CASE\\n                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\\n                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE \\\"C\\\" > $4\\n                            ELSE\\n                                name COLLATE \\\"C\\\" > $4\\n                            END\\n                    ELSE\\n                        true\\n                END\\n            ORDER BY\\n                name COLLATE \\\"C\\\" ASC) as e order by name COLLATE \\\"C\\\" LIMIT $3'\\n        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;\\nEND;\\n$function$\\n\",\n                    \"name\": \"list_objects_with_delimiter\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.lock_top_prefixes(bucket_ids text[], names text[])\\n RETURNS void\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nDECLARE\\n    v_bucket text;\\n    v_top text;\\nBEGIN\\n    FOR v_bucket, v_top IN\\n        SELECT DISTINCT t.bucket_id,\\n            split_part(t.name, '/', 1) AS top\\n        FROM unnest(bucket_ids, names) AS t(bucket_id, name)\\n        WHERE t.name <> ''\\n        ORDER BY 1, 2\\n        LOOP\\n            PERFORM pg_advisory_xact_lock(hashtextextended(v_bucket || '/' || v_top, 0));\\n        END LOOP;\\nEND;\\n$function$\\n\",\n                    \"name\": \"lock_top_prefixes\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.objects_delete_cleanup()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nDECLARE\\n    v_bucket_ids text[];\\n    v_names      text[];\\nBEGIN\\n    IF current_setting('storage.gc.prefixes', true) = '1' THEN\\n        RETURN NULL;\\n    END IF;\\n\\n    PERFORM set_config('storage.gc.prefixes', '1', true);\\n\\n    SELECT COALESCE(array_agg(d.bucket_id), '{}'),\\n           COALESCE(array_agg(d.name), '{}')\\n    INTO v_bucket_ids, v_names\\n    FROM deleted AS d\\n    WHERE d.name <> '';\\n\\n    PERFORM storage.lock_top_prefixes(v_bucket_ids, v_names);\\n    PERFORM storage.delete_leaf_prefixes(v_bucket_ids, v_names);\\n\\n    RETURN NULL;\\nEND;\\n$function$\\n\",\n                    \"name\": \"objects_delete_cleanup\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.objects_insert_prefix_trigger()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n    PERFORM \\\"storage\\\".\\\"add_prefixes\\\"(NEW.\\\"bucket_id\\\", NEW.\\\"name\\\");\\n    NEW.level := \\\"storage\\\".\\\"get_level\\\"(NEW.\\\"name\\\");\\n\\n    RETURN NEW;\\nEND;\\n$function$\\n\",\n                    \"name\": \"objects_insert_prefix_trigger\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.objects_update_cleanup()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nDECLARE\\n    -- NEW - OLD (destinations to create prefixes for)\\n    v_add_bucket_ids text[];\\n    v_add_names      text[];\\n\\n    -- OLD - NEW (sources to prune)\\n    v_src_bucket_ids text[];\\n    v_src_names      text[];\\nBEGIN\\n    IF TG_OP <> 'UPDATE' THEN\\n        RETURN NULL;\\n    END IF;\\n\\n    -- 1) Compute NEW−OLD (added paths) and OLD−NEW (moved-away paths)\\n    WITH added AS (\\n        SELECT n.bucket_id, n.name\\n        FROM new_rows n\\n        WHERE n.name <> '' AND position('/' in n.name) > 0\\n        EXCEPT\\n        SELECT o.bucket_id, o.name FROM old_rows o WHERE o.name <> ''\\n    ),\\n    moved AS (\\n         SELECT o.bucket_id, o.name\\n         FROM old_rows o\\n         WHERE o.name <> ''\\n         EXCEPT\\n         SELECT n.bucket_id, n.name FROM new_rows n WHERE n.name <> ''\\n    )\\n    SELECT\\n        -- arrays for ADDED (dest) in stable order\\n        COALESCE( (SELECT array_agg(a.bucket_id ORDER BY a.bucket_id, a.name) FROM added a), '{}' ),\\n        COALESCE( (SELECT array_agg(a.name      ORDER BY a.bucket_id, a.name) FROM added a), '{}' ),\\n        -- arrays for MOVED (src) in stable order\\n        COALESCE( (SELECT array_agg(m.bucket_id ORDER BY m.bucket_id, m.name) FROM moved m), '{}' ),\\n        COALESCE( (SELECT array_agg(m.name      ORDER BY m.bucket_id, m.name) FROM moved m), '{}' )\\n    INTO v_add_bucket_ids, v_add_names, v_src_bucket_ids, v_src_names;\\n\\n    -- Nothing to do?\\n    IF (array_length(v_add_bucket_ids, 1) IS NULL) AND (array_length(v_src_bucket_ids, 1) IS NULL) THEN\\n        RETURN NULL;\\n    END IF;\\n\\n    -- 2) Take per-(bucket, top) locks: ALL prefixes in consistent global order to prevent deadlocks\\n    DECLARE\\n        v_all_bucket_ids text[];\\n        v_all_names text[];\\n    BEGIN\\n        -- Combine source and destination arrays for consistent lock ordering\\n        v_all_bucket_ids := COALESCE(v_src_bucket_ids, '{}') || COALESCE(v_add_bucket_ids, '{}');\\n        v_all_names := COALESCE(v_src_names, '{}') || COALESCE(v_add_names, '{}');\\n\\n        -- Single lock call ensures consistent global ordering across all transactions\\n        IF array_length(v_all_bucket_ids, 1) IS NOT NULL THEN\\n            PERFORM storage.lock_top_prefixes(v_all_bucket_ids, v_all_names);\\n        END IF;\\n    END;\\n\\n    -- 3) Create destination prefixes (NEW−OLD) BEFORE pruning sources\\n    IF array_length(v_add_bucket_ids, 1) IS NOT NULL THEN\\n        WITH candidates AS (\\n            SELECT DISTINCT t.bucket_id, unnest(storage.get_prefixes(t.name)) AS name\\n            FROM unnest(v_add_bucket_ids, v_add_names) AS t(bucket_id, name)\\n            WHERE name <> ''\\n        )\\n        INSERT INTO storage.prefixes (bucket_id, name)\\n        SELECT c.bucket_id, c.name\\n        FROM candidates c\\n        ON CONFLICT DO NOTHING;\\n    END IF;\\n\\n    -- 4) Prune source prefixes bottom-up for OLD−NEW\\n    IF array_length(v_src_bucket_ids, 1) IS NOT NULL THEN\\n        -- re-entrancy guard so DELETE on prefixes won't recurse\\n        IF current_setting('storage.gc.prefixes', true) <> '1' THEN\\n            PERFORM set_config('storage.gc.prefixes', '1', true);\\n        END IF;\\n\\n        PERFORM storage.delete_leaf_prefixes(v_src_bucket_ids, v_src_names);\\n    END IF;\\n\\n    RETURN NULL;\\nEND;\\n$function$\\n\",\n                    \"name\": \"objects_update_cleanup\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.objects_update_level_trigger()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n    -- Ensure this is an update operation and the name has changed\\n    IF TG_OP = 'UPDATE' AND (NEW.\\\"name\\\" <> OLD.\\\"name\\\" OR NEW.\\\"bucket_id\\\" <> OLD.\\\"bucket_id\\\") THEN\\n        -- Set the new level\\n        NEW.\\\"level\\\" := \\\"storage\\\".\\\"get_level\\\"(NEW.\\\"name\\\");\\n    END IF;\\n    RETURN NEW;\\nEND;\\n$function$\\n\",\n                    \"name\": \"objects_update_level_trigger\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.objects_update_prefix_trigger()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nDECLARE\\n    old_prefixes TEXT[];\\nBEGIN\\n    -- Ensure this is an update operation and the name has changed\\n    IF TG_OP = 'UPDATE' AND (NEW.\\\"name\\\" <> OLD.\\\"name\\\" OR NEW.\\\"bucket_id\\\" <> OLD.\\\"bucket_id\\\") THEN\\n        -- Retrieve old prefixes\\n        old_prefixes := \\\"storage\\\".\\\"get_prefixes\\\"(OLD.\\\"name\\\");\\n\\n        -- Remove old prefixes that are only used by this object\\n        WITH all_prefixes as (\\n            SELECT unnest(old_prefixes) as prefix\\n        ),\\n        can_delete_prefixes as (\\n             SELECT prefix\\n             FROM all_prefixes\\n             WHERE NOT EXISTS (\\n                 SELECT 1 FROM \\\"storage\\\".\\\"objects\\\"\\n                 WHERE \\\"bucket_id\\\" = OLD.\\\"bucket_id\\\"\\n                   AND \\\"name\\\" <> OLD.\\\"name\\\"\\n                   AND \\\"name\\\" LIKE (prefix || '%')\\n             )\\n         )\\n        DELETE FROM \\\"storage\\\".\\\"prefixes\\\" WHERE name IN (SELECT prefix FROM can_delete_prefixes);\\n\\n        -- Add new prefixes\\n        PERFORM \\\"storage\\\".\\\"add_prefixes\\\"(NEW.\\\"bucket_id\\\", NEW.\\\"name\\\");\\n    END IF;\\n    -- Set the new level\\n    NEW.\\\"level\\\" := \\\"storage\\\".\\\"get_level\\\"(NEW.\\\"name\\\");\\n\\n    RETURN NEW;\\nEND;\\n$function$\\n\",\n                    \"name\": \"objects_update_prefix_trigger\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.operation()\\n RETURNS text\\n LANGUAGE plpgsql\\n STABLE\\nAS $function$\\nBEGIN\\n    RETURN current_setting('storage.operation', true);\\nEND;\\n$function$\\n\",\n                    \"name\": \"operation\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.prefixes_delete_cleanup()\\n RETURNS trigger\\n LANGUAGE plpgsql\\n SECURITY DEFINER\\nAS $function$\\nDECLARE\\n    v_bucket_ids text[];\\n    v_names      text[];\\nBEGIN\\n    IF current_setting('storage.gc.prefixes', true) = '1' THEN\\n        RETURN NULL;\\n    END IF;\\n\\n    PERFORM set_config('storage.gc.prefixes', '1', true);\\n\\n    SELECT COALESCE(array_agg(d.bucket_id), '{}'),\\n           COALESCE(array_agg(d.name), '{}')\\n    INTO v_bucket_ids, v_names\\n    FROM deleted AS d\\n    WHERE d.name <> '';\\n\\n    PERFORM storage.lock_top_prefixes(v_bucket_ids, v_names);\\n    PERFORM storage.delete_leaf_prefixes(v_bucket_ids, v_names);\\n\\n    RETURN NULL;\\nEND;\\n$function$\\n\",\n                    \"name\": \"prefixes_delete_cleanup\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.prefixes_insert_trigger()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n    PERFORM \\\"storage\\\".\\\"add_prefixes\\\"(NEW.\\\"bucket_id\\\", NEW.\\\"name\\\");\\n    RETURN NEW;\\nEND;\\n$function$\\n\",\n                    \"name\": \"prefixes_insert_trigger\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\\n LANGUAGE plpgsql\\nAS $function$\\ndeclare\\n    can_bypass_rls BOOLEAN;\\nbegin\\n    SELECT rolbypassrls\\n    INTO can_bypass_rls\\n    FROM pg_roles\\n    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);\\n\\n    IF can_bypass_rls THEN\\n        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\\n    ELSE\\n        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\\n    END IF;\\nend;\\n$function$\\n\",\n                    \"name\": \"search\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\\n LANGUAGE plpgsql\\n STABLE\\nAS $function$\\ndeclare\\n    v_order_by text;\\n    v_sort_order text;\\nbegin\\n    case\\n        when sortcolumn = 'name' then\\n            v_order_by = 'name';\\n        when sortcolumn = 'updated_at' then\\n            v_order_by = 'updated_at';\\n        when sortcolumn = 'created_at' then\\n            v_order_by = 'created_at';\\n        when sortcolumn = 'last_accessed_at' then\\n            v_order_by = 'last_accessed_at';\\n        else\\n            v_order_by = 'name';\\n        end case;\\n\\n    case\\n        when sortorder = 'asc' then\\n            v_sort_order = 'asc';\\n        when sortorder = 'desc' then\\n            v_sort_order = 'desc';\\n        else\\n            v_sort_order = 'asc';\\n        end case;\\n\\n    v_order_by = v_order_by || ' ' || v_sort_order;\\n\\n    return query execute\\n        'with folders as (\\n           select path_tokens[$1] as folder\\n           from storage.objects\\n             where objects.name ilike $2 || $3 || ''%''\\n               and bucket_id = $4\\n               and array_length(objects.path_tokens, 1) <> $1\\n           group by folder\\n           order by folder ' || v_sort_order || '\\n     )\\n     (select folder as \\\"name\\\",\\n            null as id,\\n            null as updated_at,\\n            null as created_at,\\n            null as last_accessed_at,\\n            null as metadata from folders)\\n     union all\\n     (select path_tokens[$1] as \\\"name\\\",\\n            id,\\n            updated_at,\\n            created_at,\\n            last_accessed_at,\\n            metadata\\n     from storage.objects\\n     where objects.name ilike $2 || $3 || ''%''\\n       and bucket_id = $4\\n       and array_length(objects.path_tokens, 1) = $1\\n     order by ' || v_order_by || ')\\n     limit $5\\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\\nend;\\n$function$\\n\",\n                    \"name\": \"search_legacy_v1\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\\n LANGUAGE plpgsql\\n STABLE\\nAS $function$\\ndeclare\\n    v_order_by text;\\n    v_sort_order text;\\nbegin\\n    case\\n        when sortcolumn = 'name' then\\n            v_order_by = 'name';\\n        when sortcolumn = 'updated_at' then\\n            v_order_by = 'updated_at';\\n        when sortcolumn = 'created_at' then\\n            v_order_by = 'created_at';\\n        when sortcolumn = 'last_accessed_at' then\\n            v_order_by = 'last_accessed_at';\\n        else\\n            v_order_by = 'name';\\n        end case;\\n\\n    case\\n        when sortorder = 'asc' then\\n            v_sort_order = 'asc';\\n        when sortorder = 'desc' then\\n            v_sort_order = 'desc';\\n        else\\n            v_sort_order = 'asc';\\n        end case;\\n\\n    v_order_by = v_order_by || ' ' || v_sort_order;\\n\\n    return query execute\\n        'with folders as (\\n           select (string_to_array(name, ''/''))[level] as name\\n           from storage.prefixes\\n             where lower(prefixes.name) like lower($2 || $3) || ''%''\\n               and bucket_id = $4\\n               and level = $1\\n           order by name ' || v_sort_order || '\\n     )\\n     (select name,\\n            null as id,\\n            null as updated_at,\\n            null as created_at,\\n            null as last_accessed_at,\\n            null as metadata from folders)\\n     union all\\n     (select path_tokens[level] as \\\"name\\\",\\n            id,\\n            updated_at,\\n            created_at,\\n            last_accessed_at,\\n            metadata\\n     from storage.objects\\n     where lower(objects.name) like lower($2 || $3) || ''%''\\n       and bucket_id = $4\\n       and level = $1\\n     order by ' || v_order_by || ')\\n     limit $5\\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\\nend;\\n$function$\\n\",\n                    \"name\": \"search_v1_optimised\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text, sort_order text DEFAULT 'asc'::text, sort_column text DEFAULT 'name'::text, sort_column_after text DEFAULT ''::text)\\n RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\\n LANGUAGE plpgsql\\n STABLE\\nAS $function$\\nDECLARE\\n    sort_col text;\\n    sort_ord text;\\n    cursor_op text;\\n    cursor_expr text;\\n    sort_expr text;\\nBEGIN\\n    -- Validate sort_order\\n    sort_ord := lower(sort_order);\\n    IF sort_ord NOT IN ('asc', 'desc') THEN\\n        sort_ord := 'asc';\\n    END IF;\\n\\n    -- Determine cursor comparison operator\\n    IF sort_ord = 'asc' THEN\\n        cursor_op := '>';\\n    ELSE\\n        cursor_op := '<';\\n    END IF;\\n    \\n    sort_col := lower(sort_column);\\n    -- Validate sort column  \\n    IF sort_col IN ('updated_at', 'created_at') THEN\\n        cursor_expr := format(\\n            '($5 = '''' OR ROW(date_trunc(''milliseconds'', %I), name COLLATE \\\"C\\\") %s ROW(COALESCE(NULLIF($6, '''')::timestamptz, ''epoch''::timestamptz), $5))',\\n            sort_col, cursor_op\\n        );\\n        sort_expr := format(\\n            'COALESCE(date_trunc(''milliseconds'', %I), ''epoch''::timestamptz) %s, name COLLATE \\\"C\\\" %s',\\n            sort_col, sort_ord, sort_ord\\n        );\\n    ELSE\\n        cursor_expr := format('($5 = '''' OR name COLLATE \\\"C\\\" %s $5)', cursor_op);\\n        sort_expr := format('name COLLATE \\\"C\\\" %s', sort_ord);\\n    END IF;\\n\\n    RETURN QUERY EXECUTE format(\\n        $sql$\\n        SELECT * FROM (\\n            (\\n                SELECT\\n                    split_part(name, '/', $4) AS key,\\n                    name,\\n                    NULL::uuid AS id,\\n                    updated_at,\\n                    created_at,\\n                    NULL::timestamptz AS last_accessed_at,\\n                    NULL::jsonb AS metadata\\n                FROM storage.prefixes\\n                WHERE name COLLATE \\\"C\\\" LIKE $1 || '%%'\\n                    AND bucket_id = $2\\n                    AND level = $4\\n                    AND %s\\n                ORDER BY %s\\n                LIMIT $3\\n            )\\n            UNION ALL\\n            (\\n                SELECT\\n                    split_part(name, '/', $4) AS key,\\n                    name,\\n                    id,\\n                    updated_at,\\n                    created_at,\\n                    last_accessed_at,\\n                    metadata\\n                FROM storage.objects\\n                WHERE name COLLATE \\\"C\\\" LIKE $1 || '%%'\\n                    AND bucket_id = $2\\n                    AND level = $4\\n                    AND %s\\n                ORDER BY %s\\n                LIMIT $3\\n            )\\n        ) obj\\n        ORDER BY %s\\n        LIMIT $3\\n        $sql$,\\n        cursor_expr,    -- prefixes WHERE\\n        sort_expr,      -- prefixes ORDER BY\\n        cursor_expr,    -- objects WHERE\\n        sort_expr,      -- objects ORDER BY\\n        sort_expr       -- final ORDER BY\\n    )\\n    USING prefix, bucket_name, limits, levels, start_after, sort_column_after;\\nEND;\\n$function$\\n\",\n                    \"name\": \"search_v2\"\n                },\n                {\n                    \"def\": \"CREATE OR REPLACE FUNCTION storage.update_updated_at_column()\\n RETURNS trigger\\n LANGUAGE plpgsql\\nAS $function$\\nBEGIN\\n    NEW.updated_at = now();\\n    RETURN NEW; \\nEND;\\n$function$\\n\",\n                    \"name\": \"update_updated_at_column\"\n                }\n            ],\n            \"sequences\": [\n            ]\n        }\n    ],\n    \"storage\": {\n        \"buckets\": [\n            {\n                \"id\": \"avatars\",\n                \"name\": \"avatars\",\n                \"owner\": null,\n                \"public\": true,\n                \"created_at\": \"2025-09-26T23:13:43.612128+00:00\",\n                \"updated_at\": \"2025-09-26T23:13:43.612128+00:00\",\n                \"file_size_limit\": null,\n                \"allowed_mime_types\": null\n            },\n            {\n                \"id\": \"descargas\",\n                \"name\": \"descargas\",\n                \"owner\": null,\n                \"public\": false,\n                \"created_at\": \"2025-09-26T23:14:37.449802+00:00\",\n                \"updated_at\": \"2025-09-26T23:14:37.449802+00:00\",\n                \"file_size_limit\": null,\n                \"allowed_mime_types\": null\n            },\n            {\n                \"id\": \"pendientes\",\n                \"name\": \"pendientes\",\n                \"owner\": null,\n                \"public\": false,\n                \"created_at\": \"2025-09-26T23:14:12.677673+00:00\",\n                \"updated_at\": \"2025-09-26T23:14:12.677673+00:00\",\n                \"file_size_limit\": null,\n                \"allowed_mime_types\": null\n            }\n        ]\n    },\n    \"generated_at\": \"2025-10-03T17:29:02.179786+00:00\"\n}"
  }
]